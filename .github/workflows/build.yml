on:
  push:
    branches: []
    tags: ["*"]

name: Build

jobs:
  build-unity:
    name: Build for ${{ matrix.targetPlatform }} on version ${{ matrix.unityVersion }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        projectPath:
          - nekoyume
        unityVersion:
          - 2021.3.5f1
        targetPlatform:
          - Windows
          - macOS
          - Linux
    steps:
      - name: Set environment variables
        run: |
          targetPlatform=${{ matrix.targetPlatform }}

          if [ "$targetPlatform" == "Windows" ]; then
            echo "DOCKER_IMAGE_TAG=${{ matrix.unityVersion }}-windows-mono-1" >> $GITHUB_ENV
          elif [ "$targetPlatform" == "macOS" ]; then
            echo "DOCKER_IMAGE_TAG=${{ matrix.unityVersion }}-mac-mono-1" >> $GITHUB_ENV
          elif [ "$targetPlatform" == "Linux" ]; then
            echo "DOCKER_IMAGE_TAG=${{ matrix.unityVersion }}-linux-il2cpp-1" >> $GITHUB_ENV
          fi

      - uses: actions/checkout@v2
        with:
          lfs: true
          submodules: true

      - uses: actions/cache@v2
        with:
          path: ${{ matrix.projectPath }}/Library
          key: ${{ matrix.targetPlatform }}-${{ matrix.projectPath }}-Library-v4

      - name: inject sentry client data
        run: |
          TARGET_NETWORK=$(case "$GITHUB_REF" in
            refs/heads/main)
              echo -n "mainnet"
              ;;

            refs/heads/rc-*)
            echo -n "internal"
              ;;

            refs/heads/previewnet)
              echo -n "previewnet"
              ;;

            *)
              echo -n "unknown"
              ;;
          esac)

          chmod +x .github/bin/inject-sentry-client-data.sh
          .github/bin/inject-sentry-client-data.sh \
          "$GITHUB_SHA" \
          "$TARGET_NETWORK"

      - name: Build Unity Player using docker
        run: |
          docker run \
            --env UNITY_LICENSE="${{ secrets.UNITY_LICENSE }}" \
            --env UNITY_EMAIL="${{ secrets.UNITY_EMAIL }}" \
            --env UNITY_PASSWORD="${{ secrets.UNITY_PASSWORD }}" \
            --env UNITY_SERIAL="${{ secrets.UNITY_SERIAL }}" \
            -w "${{ github.workspace }}" \
            -v "${{ github.workspace }}":"${{ github.workspace }}" \
            unityci/editor:${DOCKER_IMAGE_TAG} \
            scripts/build-player.sh ${{ matrix.targetPlatform }}

      - uses: actions/upload-artifact@v2
        with:
          name: 9c-${{ matrix.targetPlatform }}
          path: nekoyume/Build/${{ matrix.targetPlatform }}
          retention-days: 1
          if-no-files-found: error
  publish:
    name: Publish Unity Player for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - Windows
          - macOS
          - Linux
    needs: build-unity
    if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/development' || startsWith(github.ref, 'refs/heads/rc-') || github.ref == 'refs/heads/previewnet' || github.ref == 'refs/heads/2022q2' }}
    steps:
      - uses: actions/checkout@v2

      - id: download_player
        uses: actions/download-artifact@v2
        with:
          name: 9c-${{ matrix.targetPlatform }}
          path: /tmp/player

      - name: Set up Python # FIXME: 나중에 내장 파이썬 버전이 3.7 이상으로 올라가면 삭제할 것
        uses: actions/setup-python@v2
        with:
          python-version: 3.8.6

      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "3.1.201"

      - name: Pack
        run: |
          set -evx
          mkdir -p $HOME/.local/bin
          npm config set prefix $HOME/.local/bin
          export PATH="$HOME/.local/bin:$PATH"
          npm install --global strip-json-comments-cli
          dotnet tool install \
            --global \
            Libplanet.Tools

          # macOS 내장 date는 ISO 8601 서식 옵션이 따로 없음
          timestamp="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          pip3 install wheel

          .github/bin/pack.sh \
          /tmp/package \
          "${{ matrix.targetPlatform }}" \
          "${{ steps.download_player.outputs.download-path }}" \
          "${{ secrets.APV_SIGNING_PRIVATE_KEY }}" \
          "$timestamp"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - uses: chrnorm/deployment-action@releases/v1
        id: build_artifact
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          description: "Build artifact"
          environment: build-artifact

      - run: mv /tmp/package ./package # s3-upload-action이 상대 경로만 지원
        if: success()
        shell: bash

      - name: Upload Artifacts
        run: aws s3 cp package s3://9c-artifacts/${{ github.sha }}/ --recursive
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - if: success()
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          target_url: ${{ steps.S3.outputs.object_locations[0] }}
          state: "success"
          deployment_id: ${{ steps.build_artifact.outputs.deployment_id }}
