//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Do not modify the contents of this file directly.
//     Changes might be overwritten the next time the code is generated.
//     Source URL: http://k8s-arenaser-arenaser-caf72b8307-d45b2a0992a4815e.elb.us-east-2.amazonaws.com/swagger/v1/swagger.json
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Text.Json.Serialization;
using System.Collections.Generic;
using System;
using System.Collections;
using System.Text.Json;
using System.Threading.Tasks;
using System.Net.Http;
using UnityEngine.Networking;
using Cysharp.Threading.Tasks;
using System.Text;
using System.Linq;

namespace GeneratedApiNamespace.ArenaServiceClient{
    public class ArenaInfoResponse
    {
        [JsonPropertyName("user")]
        public UserResponse User { get; set; }
        [JsonPropertyName("clanInfo")]
        public ClanResponse ClanInfo { get; set; }
        [JsonPropertyName("seasonId")]
        public int SeasonId { get; set; }
        [JsonPropertyName("roundId")]
        public int RoundId { get; set; }
        [JsonPropertyName("score")]
        public int Score { get; set; }
        [JsonPropertyName("rank")]
        public int Rank { get; set; }
        [JsonPropertyName("currentRoundScoreChange")]
        public int CurrentRoundScoreChange { get; set; }
        [JsonPropertyName("currentRoundRankChange")]
        public int CurrentRoundRankChange { get; set; }
        [JsonPropertyName("totalWin")]
        public int TotalWin { get; set; }
        [JsonPropertyName("totalLose")]
        public int TotalLose { get; set; }
        [JsonPropertyName("currentRoundWinChange")]
        public int CurrentRoundWinChange { get; set; }
        [JsonPropertyName("currentRoundLoseChange")]
        public int CurrentRoundLoseChange { get; set; }
        [JsonPropertyName("battleTicketStatus")]
        public TicketStatusResponse BattleTicketStatus { get; set; }
        [JsonPropertyName("refreshTicketStatus")]
        public TicketStatusResponse RefreshTicketStatus { get; set; }
    }

    [JsonConverter(typeof(ArenaTypeTypeConverter))]
    public enum ArenaType
    {
        OFF_SEASON,
        SEASON,
        CHAMPIONSHIP,
    }

    public class ArenaTypeTypeConverter : JsonConverter<ArenaType>
    {
        public static readonly Dictionary<string, string> InvalidEnumMapping = new Dictionary<string, string>
        {
        };
        public override ArenaType Read(
            ref Utf8JsonReader reader,
            Type typeToConvert,
            JsonSerializerOptions options)
        {
            return reader.TokenType switch
            {
                JsonTokenType.Number => (ArenaType)reader.GetInt32(),
                JsonTokenType.String => Enum.Parse<ArenaType>(InvalidEnumMapping.TryGetValue(reader.GetString(), out var validName) ? validName : reader.GetString()),
                _ => throw new JsonException(
                    $"Expected token type to be {string.Join(" or ", new[] { JsonTokenType.Number, JsonTokenType.String })} but got {reader.TokenType}")
            };
        }
        public override void Write(
            Utf8JsonWriter writer,
            ArenaType value,
            JsonSerializerOptions options)
        {
            var enumString = value.ToString();
            if (InvalidEnumMapping.ContainsValue(enumString))
            {
                enumString = InvalidEnumMapping.First(kvp => kvp.Value == enumString).Key;
            }
            writer.WriteStringValue(enumString);
        }
    }

    public class AvailableOpponentResponse
    {
        [JsonPropertyName("avatarAddress")]
        public string AvatarAddress { get; set; }
        [JsonPropertyName("nameWithHash")]
        public string NameWithHash { get; set; }
        [JsonPropertyName("portraitId")]
        public int PortraitId { get; set; }
        [JsonPropertyName("cp")]
        public Int64 Cp { get; set; }
        [JsonPropertyName("level")]
        public int Level { get; set; }
        [JsonPropertyName("seasonId")]
        public int SeasonId { get; set; }
        [JsonPropertyName("score")]
        public int Score { get; set; }
        [JsonPropertyName("rank")]
        public int Rank { get; set; }
        [JsonPropertyName("groupId")]
        public int GroupId { get; set; }
        [JsonPropertyName("isAttacked")]
        public bool IsAttacked { get; set; }
        [JsonPropertyName("scoreGainOnWin")]
        public int ScoreGainOnWin { get; set; }
        [JsonPropertyName("scoreLossOnLose")]
        public int ScoreLossOnLose { get; set; }
        [JsonPropertyName("isVictory")]
        public bool? IsVictory { get; set; }
        [JsonPropertyName("clanInfo")]
        public ClanResponse ClanInfo { get; set; }
    }

    public class BattleRequest
    {
        [JsonPropertyName("txId")]
        public string TxId { get; set; }
    }

    public class BattleResponse
    {
        [JsonPropertyName("id")]
        public int Id { get; set; }
        [JsonPropertyName("seasonId")]
        public int SeasonId { get; set; }
        [JsonPropertyName("myAvatarAddress")]
        public string MyAvatarAddress { get; set; }
        [JsonPropertyName("opponentAvatarAddress")]
        public string OpponentAvatarAddress { get; set; }
        [JsonPropertyName("battleStatus")]
        public BattleStatus BattleStatus { get; set; }
        [JsonPropertyName("txId")]
        public object TxId { get; set; }
        [JsonPropertyName("txStatus")]
        public TxStatus TxStatus { get; set; }
        [JsonPropertyName("isVictory")]
        public bool? IsVictory { get; set; }
        [JsonPropertyName("myScore")]
        public int? MyScore { get; set; }
        [JsonPropertyName("myScoreChange")]
        public int? MyScoreChange { get; set; }
        [JsonPropertyName("opponentScoreChange")]
        public int? OpponentScoreChange { get; set; }
    }

    [JsonConverter(typeof(BattleStatusTypeConverter))]
    public enum BattleStatus
    {
        TOKEN_ISSUED,
        TRACKING,
        NOT_FOUND_BATTLE_ACTION,
        INVALID_BATTLE,
        DUPLICATE_TRANSACTION,
        TX_FAILED,
        SUCCESS,
    }

    public class BattleStatusTypeConverter : JsonConverter<BattleStatus>
    {
        public static readonly Dictionary<string, string> InvalidEnumMapping = new Dictionary<string, string>
        {
        };
        public override BattleStatus Read(
            ref Utf8JsonReader reader,
            Type typeToConvert,
            JsonSerializerOptions options)
        {
            return reader.TokenType switch
            {
                JsonTokenType.Number => (BattleStatus)reader.GetInt32(),
                JsonTokenType.String => Enum.Parse<BattleStatus>(InvalidEnumMapping.TryGetValue(reader.GetString(), out var validName) ? validName : reader.GetString()),
                _ => throw new JsonException(
                    $"Expected token type to be {string.Join(" or ", new[] { JsonTokenType.Number, JsonTokenType.String })} but got {reader.TokenType}")
            };
        }
        public override void Write(
            Utf8JsonWriter writer,
            BattleStatus value,
            JsonSerializerOptions options)
        {
            var enumString = value.ToString();
            if (InvalidEnumMapping.ContainsValue(enumString))
            {
                enumString = InvalidEnumMapping.First(kvp => kvp.Value == enumString).Key;
            }
            writer.WriteStringValue(enumString);
        }
    }

    public class BattleTokenResponse
    {
        [JsonPropertyName("token")]
        public string Token { get; set; }
        [JsonPropertyName("battleId")]
        public int BattleId { get; set; }
    }

    public class ClanLeaderboardResponse
    {
        [JsonPropertyName("leaderboard")]
        public List<ClanResponse> Leaderboard { get; set; }
        [JsonPropertyName("myClan")]
        public ClanResponse MyClan { get; set; }
    }

    public class ClanResponse
    {
        [JsonPropertyName("imageURL")]
        public string ImageURL { get; set; }
        [JsonPropertyName("name")]
        public string Name { get; set; }
        [JsonPropertyName("rank")]
        public int Rank { get; set; }
        [JsonPropertyName("score")]
        public int Score { get; set; }
    }

    public class ClassifyByBlockMedalsResponse
    {
        [JsonPropertyName("medals")]
        public List<MedalResponse> Medals { get; set; }
        [JsonPropertyName("totalMedalCountForThisChampionship")]
        public int TotalMedalCountForThisChampionship { get; set; }
    }

    public class MedalResponse
    {
        [JsonPropertyName("seasonId")]
        public int SeasonId { get; set; }
        [JsonPropertyName("medalCount")]
        public int MedalCount { get; set; }
    }

    public class ProblemDetails
    {
        [JsonPropertyName("type")]
        public string? Type { get; set; }
        [JsonPropertyName("title")]
        public string? Title { get; set; }
        [JsonPropertyName("status")]
        public int? Status { get; set; }
        [JsonPropertyName("detail")]
        public string? Detail { get; set; }
        [JsonPropertyName("instance")]
        public string? Instance { get; set; }
    }

    [JsonConverter(typeof(PurchaseStatusTypeConverter))]
    public enum PurchaseStatus
    {
        PENDING,
        TRACKING,
        NOT_FOUND_TRANSFER_ASSETS_ACTION,
        INSUFFICIENT_PAYMENT,
        INVALID_RECIPIENT,
        DUPLICATE_TRANSACTION,
        TX_FAILED,
        SUCCESS,
    }

    public class PurchaseStatusTypeConverter : JsonConverter<PurchaseStatus>
    {
        public static readonly Dictionary<string, string> InvalidEnumMapping = new Dictionary<string, string>
        {
        };
        public override PurchaseStatus Read(
            ref Utf8JsonReader reader,
            Type typeToConvert,
            JsonSerializerOptions options)
        {
            return reader.TokenType switch
            {
                JsonTokenType.Number => (PurchaseStatus)reader.GetInt32(),
                JsonTokenType.String => Enum.Parse<PurchaseStatus>(InvalidEnumMapping.TryGetValue(reader.GetString(), out var validName) ? validName : reader.GetString()),
                _ => throw new JsonException(
                    $"Expected token type to be {string.Join(" or ", new[] { JsonTokenType.Number, JsonTokenType.String })} but got {reader.TokenType}")
            };
        }
        public override void Write(
            Utf8JsonWriter writer,
            PurchaseStatus value,
            JsonSerializerOptions options)
        {
            var enumString = value.ToString();
            if (InvalidEnumMapping.ContainsValue(enumString))
            {
                enumString = InvalidEnumMapping.First(kvp => kvp.Value == enumString).Key;
            }
            writer.WriteStringValue(enumString);
        }
    }

    public class PurchaseTicketRequest
    {
        [JsonPropertyName("ticketCount")]
        public int TicketCount { get; set; }
        [JsonPropertyName("purchasePrice")]
        public decimal PurchasePrice { get; set; }
        [JsonPropertyName("txId")]
        public string TxId { get; set; }
    }

    public class RoundResponse
    {
        [JsonPropertyName("id")]
        public int Id { get; set; }
        [JsonPropertyName("startBlockIndex")]
        public Int64 StartBlockIndex { get; set; }
        [JsonPropertyName("endBlockIndex")]
        public Int64 EndBlockIndex { get; set; }
    }

    public class SeasonResponse
    {
        [JsonPropertyName("id")]
        public int Id { get; set; }
        [JsonPropertyName("arenaType")]
        public ArenaType ArenaType { get; set; }
        [JsonPropertyName("startBlockIndex")]
        public Int64 StartBlockIndex { get; set; }
        [JsonPropertyName("endBlockIndex")]
        public Int64 EndBlockIndex { get; set; }
        [JsonPropertyName("roundInterval")]
        public int RoundInterval { get; set; }
        [JsonPropertyName("requiredMedalCount")]
        public int RequiredMedalCount { get; set; }
        [JsonPropertyName("battleTicketPolicy")]
        public TicketPolicyResponse BattleTicketPolicy { get; set; }
        [JsonPropertyName("refreshTicketPolicy")]
        public TicketPolicyResponse RefreshTicketPolicy { get; set; }
        [JsonPropertyName("totalPrize")]
        public int TotalPrize { get; set; }
        [JsonPropertyName("prizeDetailSiteURL")]
        public string PrizeDetailSiteURL { get; set; }
        [JsonPropertyName("rounds")]
        public List<RoundResponse> Rounds { get; set; }
    }

    public class SeasonsResponse
    {
        [JsonPropertyName("seasons")]
        public List<SeasonResponse> Seasons { get; set; }
        [JsonPropertyName("operationAccountAddress")]
        public string OperationAccountAddress { get; set; }
    }

    public class TicketPolicyResponse
    {
        [JsonPropertyName("defaultTicketsPerRound")]
        public int DefaultTicketsPerRound { get; set; }
        [JsonPropertyName("maxPurchasableTicketsPerRound")]
        public int MaxPurchasableTicketsPerRound { get; set; }
        [JsonPropertyName("purchasePrices")]
        public List<decimal> PurchasePrices { get; set; }
    }

    public class TicketPurchaseLogResponse
    {
        [JsonPropertyName("seasonId")]
        public int SeasonId { get; set; }
        [JsonPropertyName("roundId")]
        public int RoundId { get; set; }
        [JsonPropertyName("amountPaid")]
        public decimal? AmountPaid { get; set; }
        [JsonPropertyName("purchaseCount")]
        public int PurchaseCount { get; set; }
        [JsonPropertyName("purchaseStatus")]
        public PurchaseStatus PurchaseStatus { get; set; }
        [JsonPropertyName("txId")]
        public string TxId { get; set; }
        [JsonPropertyName("txStatus")]
        public TxStatus TxStatus { get; set; }
    }

    public class TicketStatusResponse
    {
        /// <summary>
        /// <para>현재 라운드에서 구매한 티켓의 개수</para>
        /// </summary>
        [JsonPropertyName("ticketsPurchasedPerRound")]
        public int TicketsPurchasedPerRound { get; set; }
        /// <summary>
        /// <para>현재 라운드에서 사용한 티켓의 개수</para>
        /// </summary>
        [JsonPropertyName("ticketsUsedPerRound")]
        public int TicketsUsedPerRound { get; set; }
        /// <summary>
        /// <para>현재 라운드에서 사용 가능한(남아있는) 티켓의 개수</para>
        /// </summary>
        [JsonPropertyName("remainingTicketsPerRound")]
        public int RemainingTicketsPerRound { get; set; }
        /// <summary>
        /// <para>현재 라운드에서 구매 가능한 티켓의 개수</para>
        /// </summary>
        [JsonPropertyName("remainingPurchasableTicketsPerRound")]
        public int RemainingPurchasableTicketsPerRound { get; set; }
        /// <summary>
        /// <para>아직 티켓을 사용한 적이 없음</para>
        /// </summary>
        [JsonPropertyName("isUnused")]
        public bool IsUnused { get; set; }
        /// <summary>
        /// <para>다음에 지불해야할 NCG</para>
        /// </summary>
        [JsonPropertyName("nextNCGCosts")]
        public List<decimal> NextNCGCosts { get; set; }
    }

    [JsonConverter(typeof(TxStatusTypeConverter))]
    public enum TxStatus
    {
        INVALID,
        STAGING,
        SUCCESS,
        FAILURE,
        INCLUDED,
    }

    public class TxStatusTypeConverter : JsonConverter<TxStatus>
    {
        public static readonly Dictionary<string, string> InvalidEnumMapping = new Dictionary<string, string>
        {
        };
        public override TxStatus Read(
            ref Utf8JsonReader reader,
            Type typeToConvert,
            JsonSerializerOptions options)
        {
            return reader.TokenType switch
            {
                JsonTokenType.Number => (TxStatus)reader.GetInt32(),
                JsonTokenType.String => Enum.Parse<TxStatus>(InvalidEnumMapping.TryGetValue(reader.GetString(), out var validName) ? validName : reader.GetString()),
                _ => throw new JsonException(
                    $"Expected token type to be {string.Join(" or ", new[] { JsonTokenType.Number, JsonTokenType.String })} but got {reader.TokenType}")
            };
        }
        public override void Write(
            Utf8JsonWriter writer,
            TxStatus value,
            JsonSerializerOptions options)
        {
            var enumString = value.ToString();
            if (InvalidEnumMapping.ContainsValue(enumString))
            {
                enumString = InvalidEnumMapping.First(kvp => kvp.Value == enumString).Key;
            }
            writer.WriteStringValue(enumString);
        }
    }

    public class UnauthorizedHttpResult
    {
        [JsonPropertyName("statusCode")]
        public int StatusCode { get; set; }
    }

    public class UserRegisterRequest
    {
        [JsonPropertyName("nameWithHash")]
        public string NameWithHash { get; set; }
        [JsonPropertyName("portraitId")]
        public int PortraitId { get; set; }
        [JsonPropertyName("cp")]
        public Int64 Cp { get; set; }
        [JsonPropertyName("level")]
        public int Level { get; set; }
    }

    public class UserResponse
    {
        [JsonPropertyName("avatarAddress")]
        public string AvatarAddress { get; set; }
        [JsonPropertyName("nameWithHash")]
        public string NameWithHash { get; set; }
        [JsonPropertyName("portraitId")]
        public int PortraitId { get; set; }
        [JsonPropertyName("cp")]
        public Int64 Cp { get; set; }
        [JsonPropertyName("level")]
        public int Level { get; set; }
    }

public class ArenaServiceClient
{
    private string Url;

    public ArenaServiceClient(string url)
    {
        Url = url;
    }

    public void Dispose()
    {
    }

    /// <param name="Authorization">
    /// <para>JWT Authorization header using the Bearer scheme. Example: "Bearer {token}"</para>
    /// </param>
    /// <response code="200">
    /// <para>ArenaInfoResponse</para>
    /// </response>
    /// <response code="401">
    /// <para>Status401Unauthorized</para>
    /// </response>
    /// <response code="404">
    /// <para>Status404NotFound</para>
    /// </response>
    public async Task GetInfoAsync(
        string Authorization, 
        // ArenaInfoResponse
        Action<ArenaInfoResponse> on200ArenaInfoResponse = null, 
        // Status401Unauthorized
        Action<string> on401Status401Unauthorized = null, 
        // Status404NotFound
        Action<string> on404Status404NotFound = null, 
        Action<string> onError = null)
    {
        string url = $"{Url}/info";
        using (var request = new UnityWebRequest(url, "GET"))
        {
            request.uri = new Uri(url);
            request.SetRequestHeader("Authorization", Authorization.ToString());
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("accept", "application/json");
            request.SetRequestHeader("Content-Type", "application/json");
            request.timeout = 10;
            try
            {
                await request.SendWebRequest();
                GetInfoAsyncProcessResponse(request, on200ArenaInfoResponse, on401Status401Unauthorized, on404Status404NotFound, onError);
            }
            catch (Exception ex)
            {
                GetInfoAsyncProcessResponse(request, on200ArenaInfoResponse, on401Status401Unauthorized, on404Status404NotFound, onError);
            }
        }
    }

    private void GetInfoAsyncProcessResponse(UnityWebRequest webRequest, Action<ArenaInfoResponse> on200ArenaInfoResponse, Action<string> on401Status401Unauthorized, Action<string> on404Status404NotFound, Action<string> onError)
    {
        string responseText = webRequest.downloadHandler?.text ?? string.Empty;
        if (webRequest.responseCode == 200) // ArenaInfoResponse
        {
            if (on200ArenaInfoResponse != null)
            {
                ArenaInfoResponse responseData;
                try { responseData = System.Text.Json.JsonSerializer.Deserialize<ArenaInfoResponse>(responseText); }
                catch (JsonException ex) { onError(ex.Message + " \n\nResponse Text: " + responseText); return; }
                on200ArenaInfoResponse(responseData);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (webRequest.responseCode == 401) // Status401Unauthorized
        {
            if (on401Status401Unauthorized != null)
            {
                on401Status401Unauthorized(responseText);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (webRequest.responseCode == 404) // Status404NotFound
        {
            if (on404Status404NotFound != null)
            {
                on404Status404NotFound(responseText);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (onError != null)
        {
            onError(webRequest.error);
        }
    }

    /// <param name="Authorization">
    /// <para>JWT Authorization header using the Bearer scheme. Example: "Bearer {token}"</para>
    /// </param>
    /// <response code="200">
    /// <para>AvailableOpponents</para>
    /// </response>
    /// <response code="401">
    /// <para>Status401Unauthorized</para>
    /// </response>
    /// <response code="404">
    /// <para>Status404NotFound</para>
    /// </response>
    /// <response code="503">
    /// <para>Status503ServiceUnavailable</para>
    /// </response>
    public async Task GetAvailableopponentsAsync(
        string Authorization, 
        // AvailableOpponents
        Action<AvailableOpponentResponse[]> on200AvailableOpponents = null, 
        // Status401Unauthorized
        Action<string> on401Status401Unauthorized = null, 
        // Status404NotFound
        Action<string> on404Status404NotFound = null, 
        // Status503ServiceUnavailable
        Action<string> on503Status503ServiceUnavailable = null, 
        Action<string> onError = null)
    {
        string url = $"{Url}/available-opponents";
        using (var request = new UnityWebRequest(url, "GET"))
        {
            request.uri = new Uri(url);
            request.SetRequestHeader("Authorization", Authorization.ToString());
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("accept", "application/json");
            request.SetRequestHeader("Content-Type", "application/json");
            request.timeout = 10;
            try
            {
                await request.SendWebRequest();
                GetAvailableopponentsAsyncProcessResponse(request, on200AvailableOpponents, on401Status401Unauthorized, on404Status404NotFound, on503Status503ServiceUnavailable, onError);
            }
            catch (Exception ex)
            {
                GetAvailableopponentsAsyncProcessResponse(request, on200AvailableOpponents, on401Status401Unauthorized, on404Status404NotFound, on503Status503ServiceUnavailable, onError);
            }
        }
    }

    private void GetAvailableopponentsAsyncProcessResponse(UnityWebRequest webRequest, Action<AvailableOpponentResponse[]> on200AvailableOpponents, Action<string> on401Status401Unauthorized, Action<string> on404Status404NotFound, Action<string> on503Status503ServiceUnavailable, Action<string> onError)
    {
        string responseText = webRequest.downloadHandler?.text ?? string.Empty;
        if (webRequest.responseCode == 200) // AvailableOpponents
        {
            if (on200AvailableOpponents != null)
            {
                AvailableOpponentResponse[] responseData;
                try { responseData = System.Text.Json.JsonSerializer.Deserialize<AvailableOpponentResponse[]>(responseText); }
                catch (JsonException ex) { onError(ex.Message + " \n\nResponse Text: " + responseText); return; }
                on200AvailableOpponents(responseData);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (webRequest.responseCode == 401) // Status401Unauthorized
        {
            if (on401Status401Unauthorized != null)
            {
                on401Status401Unauthorized(responseText);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (webRequest.responseCode == 404) // Status404NotFound
        {
            if (on404Status404NotFound != null)
            {
                on404Status404NotFound(responseText);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (webRequest.responseCode == 503) // Status503ServiceUnavailable
        {
            if (on503Status503ServiceUnavailable != null)
            {
                on503Status503ServiceUnavailable(responseText);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (onError != null)
        {
            onError(webRequest.error);
        }
    }

    /// <param name="Authorization">
    /// <para>JWT Authorization header using the Bearer scheme. Example: "Bearer {token}"</para>
    /// </param>
    /// <response code="200">
    /// <para>AvailableOpponents</para>
    /// </response>
    /// <response code="400">
    /// <para>Free refresh is not available at this time. Additional cost is required.</para>
    /// </response>
    public async Task PostAvailableopponentsRefreshAsync(
        string Authorization, 
        // AvailableOpponents
        Action<AvailableOpponentResponse[]> on200AvailableOpponents = null, 
        // Free refresh is not available at this time. Additional cost is required.
        Action<string> on400Freerefreshisnotavailableatthi = null, 
        // 
        Action<string> on401 = null, 
        // 
        Action<string> on503 = null, 
        Action<string> onError = null)
    {
        string url = $"{Url}/available-opponents/refresh";
        using (var request = new UnityWebRequest(url, "POST"))
        {
            request.uri = new Uri(url);
            request.SetRequestHeader("Authorization", Authorization.ToString());
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("accept", "application/json");
            request.SetRequestHeader("Content-Type", "application/json");
            request.timeout = 10;
            try
            {
                await request.SendWebRequest();
                PostAvailableopponentsRefreshAsyncProcessResponse(request, on200AvailableOpponents, on400Freerefreshisnotavailableatthi, on401, on503, onError);
            }
            catch (Exception ex)
            {
                PostAvailableopponentsRefreshAsyncProcessResponse(request, on200AvailableOpponents, on400Freerefreshisnotavailableatthi, on401, on503, onError);
            }
        }
    }

    private void PostAvailableopponentsRefreshAsyncProcessResponse(UnityWebRequest webRequest, Action<AvailableOpponentResponse[]> on200AvailableOpponents, Action<string> on400Freerefreshisnotavailableatthi, Action<string> on401, Action<string> on503, Action<string> onError)
    {
        string responseText = webRequest.downloadHandler?.text ?? string.Empty;
        if (webRequest.responseCode == 200) // AvailableOpponents
        {
            if (on200AvailableOpponents != null)
            {
                AvailableOpponentResponse[] responseData;
                try { responseData = System.Text.Json.JsonSerializer.Deserialize<AvailableOpponentResponse[]>(responseText); }
                catch (JsonException ex) { onError(ex.Message + " \n\nResponse Text: " + responseText); return; }
                on200AvailableOpponents(responseData);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (webRequest.responseCode == 400) // Free refresh is not available at this time. Additional cost is required.
        {
            if (on400Freerefreshisnotavailableatthi != null)
            {
                on400Freerefreshisnotavailableatthi(responseText);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (webRequest.responseCode == 401) // 
        {
            if (on401 != null)
            {
                on401(responseText);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (webRequest.responseCode == 503) // 
        {
            if (on503 != null)
            {
                on503(responseText);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (onError != null)
        {
            onError(webRequest.error);
        }
    }

    /// <param name="Authorization">
    /// <para>JWT Authorization header using the Bearer scheme. Example: "Bearer {token}"</para>
    /// </param>
    /// <response code="201">
    /// <para>Created</para>
    /// </response>
    /// <response code="401">
    /// <para>Unauthorized</para>
    /// </response>
    /// <response code="503">
    /// <para>Service Unavailable</para>
    /// </response>
    public async Task GetBattleTokenAsync(
        string opponentAvatarAddress, string Authorization, 
        // Created
        Action<BattleTokenResponse> on201Created = null, 
        // Unauthorized
        Action<UnauthorizedHttpResult> on401Unauthorized = null, 
        // Service Unavailable
        Action<string> on503ServiceUnavailable = null, 
        Action<string> onError = null)
    {
        string url = $"{Url}/battle/token";
        using (var request = new UnityWebRequest(url, "GET"))
        {
            url += $"?opponentAvatarAddress={opponentAvatarAddress}";
            request.uri = new Uri(url);
            request.SetRequestHeader("Authorization", Authorization.ToString());
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("accept", "application/json");
            request.SetRequestHeader("Content-Type", "application/json");
            request.timeout = 10;
            try
            {
                await request.SendWebRequest();
                GetBattleTokenAsyncProcessResponse(request, on201Created, on401Unauthorized, on503ServiceUnavailable, onError);
            }
            catch (Exception ex)
            {
                GetBattleTokenAsyncProcessResponse(request, on201Created, on401Unauthorized, on503ServiceUnavailable, onError);
            }
        }
    }

    private void GetBattleTokenAsyncProcessResponse(UnityWebRequest webRequest, Action<BattleTokenResponse> on201Created, Action<UnauthorizedHttpResult> on401Unauthorized, Action<string> on503ServiceUnavailable, Action<string> onError)
    {
        string responseText = webRequest.downloadHandler?.text ?? string.Empty;
        if (webRequest.responseCode == 201) // Created
        {
            if (on201Created != null)
            {
                BattleTokenResponse responseData;
                try { responseData = System.Text.Json.JsonSerializer.Deserialize<BattleTokenResponse>(responseText); }
                catch (JsonException ex) { onError(ex.Message + " \n\nResponse Text: " + responseText); return; }
                on201Created(responseData);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (webRequest.responseCode == 401) // Unauthorized
        {
            if (on401Unauthorized != null)
            {
                UnauthorizedHttpResult responseData;
                try { responseData = System.Text.Json.JsonSerializer.Deserialize<UnauthorizedHttpResult>(responseText); }
                catch (JsonException ex) { onError(ex.Message + " \n\nResponse Text: " + responseText); return; }
                on401Unauthorized(responseData);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (webRequest.responseCode == 503) // Service Unavailable
        {
            if (on503ServiceUnavailable != null)
            {
                on503ServiceUnavailable(responseText);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (onError != null)
        {
            onError(webRequest.error);
        }
    }

    /// <param name="Authorization">
    /// <para>JWT Authorization header using the Bearer scheme. Example: "Bearer {token}"</para>
    /// </param>
    /// <response code="200">
    /// <para>OK</para>
    /// </response>
    /// <response code="401">
    /// <para>Unauthorized</para>
    /// </response>
    /// <response code="403">
    /// <para>Forbidden</para>
    /// </response>
    /// <response code="404">
    /// <para>Not Found</para>
    /// </response>
    public async Task PostBattleRequestAsync(
        int battleId, string Authorization, BattleRequest requestBody, 
        // OK
        Action<string> on200OK = null, 
        // Unauthorized
        Action<ProblemDetails> on401Unauthorized = null, 
        // Forbidden
        Action<ProblemDetails> on403Forbidden = null, 
        // Not Found
        Action<string> on404NotFound = null, 
        Action<string> onError = null)
    {
        string url = $"{Url}/battle/{battleId}/request";
        using (var request = new UnityWebRequest(url, "POST"))
        {
            request.uri = new Uri(url);
            request.SetRequestHeader("Authorization", Authorization.ToString());
            var bodyString = System.Text.Json.JsonSerializer.Serialize(requestBody);
            var jsonToSend = new UTF8Encoding().GetBytes(bodyString);
            request.uploadHandler = new UploadHandlerRaw(jsonToSend);
            request.uploadHandler.contentType = "application/json";
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("accept", "application/json");
            request.SetRequestHeader("Content-Type", "application/json");
            request.timeout = 10;
            try
            {
                await request.SendWebRequest();
                PostBattleRequestAsyncProcessResponse(request, on200OK, on401Unauthorized, on403Forbidden, on404NotFound, onError);
            }
            catch (Exception ex)
            {
                PostBattleRequestAsyncProcessResponse(request, on200OK, on401Unauthorized, on403Forbidden, on404NotFound, onError);
            }
        }
    }

    private void PostBattleRequestAsyncProcessResponse(UnityWebRequest webRequest, Action<string> on200OK, Action<ProblemDetails> on401Unauthorized, Action<ProblemDetails> on403Forbidden, Action<string> on404NotFound, Action<string> onError)
    {
        string responseText = webRequest.downloadHandler?.text ?? string.Empty;
        if (webRequest.responseCode == 200) // OK
        {
            if (on200OK != null)
            {
                on200OK(responseText);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (webRequest.responseCode == 401) // Unauthorized
        {
            if (on401Unauthorized != null)
            {
                ProblemDetails responseData;
                try { responseData = System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(responseText); }
                catch (JsonException ex) { onError(ex.Message + " \n\nResponse Text: " + responseText); return; }
                on401Unauthorized(responseData);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (webRequest.responseCode == 403) // Forbidden
        {
            if (on403Forbidden != null)
            {
                ProblemDetails responseData;
                try { responseData = System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(responseText); }
                catch (JsonException ex) { onError(ex.Message + " \n\nResponse Text: " + responseText); return; }
                on403Forbidden(responseData);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (webRequest.responseCode == 404) // Not Found
        {
            if (on404NotFound != null)
            {
                on404NotFound(responseText);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (onError != null)
        {
            onError(webRequest.error);
        }
    }

    /// <param name="Authorization">
    /// <para>JWT Authorization header using the Bearer scheme. Example: "Bearer {token}"</para>
    /// </param>
    /// <response code="200">
    /// <para>OK</para>
    /// </response>
    /// <response code="401">
    /// <para>Unauthorized</para>
    /// </response>
    /// <response code="403">
    /// <para>Forbidden</para>
    /// </response>
    /// <response code="404">
    /// <para>Not Found</para>
    /// </response>
    public async Task GetBattleAsync(
        int battleId, string Authorization, 
        // OK
        Action<BattleResponse> on200OK = null, 
        // Unauthorized
        Action<ProblemDetails> on401Unauthorized = null, 
        // Forbidden
        Action<ProblemDetails> on403Forbidden = null, 
        // Not Found
        Action<string> on404NotFound = null, 
        Action<string> onError = null)
    {
        string url = $"{Url}/battle/{battleId}";
        using (var request = new UnityWebRequest(url, "GET"))
        {
            request.uri = new Uri(url);
            request.SetRequestHeader("Authorization", Authorization.ToString());
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("accept", "application/json");
            request.SetRequestHeader("Content-Type", "application/json");
            request.timeout = 10;
            try
            {
                await request.SendWebRequest();
                GetBattleAsyncProcessResponse(request, on200OK, on401Unauthorized, on403Forbidden, on404NotFound, onError);
            }
            catch (Exception ex)
            {
                GetBattleAsyncProcessResponse(request, on200OK, on401Unauthorized, on403Forbidden, on404NotFound, onError);
            }
        }
    }

    private void GetBattleAsyncProcessResponse(UnityWebRequest webRequest, Action<BattleResponse> on200OK, Action<ProblemDetails> on401Unauthorized, Action<ProblemDetails> on403Forbidden, Action<string> on404NotFound, Action<string> onError)
    {
        string responseText = webRequest.downloadHandler?.text ?? string.Empty;
        if (webRequest.responseCode == 200) // OK
        {
            if (on200OK != null)
            {
                BattleResponse responseData;
                try { responseData = System.Text.Json.JsonSerializer.Deserialize<BattleResponse>(responseText); }
                catch (JsonException ex) { onError(ex.Message + " \n\nResponse Text: " + responseText); return; }
                on200OK(responseData);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (webRequest.responseCode == 401) // Unauthorized
        {
            if (on401Unauthorized != null)
            {
                ProblemDetails responseData;
                try { responseData = System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(responseText); }
                catch (JsonException ex) { onError(ex.Message + " \n\nResponse Text: " + responseText); return; }
                on401Unauthorized(responseData);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (webRequest.responseCode == 403) // Forbidden
        {
            if (on403Forbidden != null)
            {
                ProblemDetails responseData;
                try { responseData = System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(responseText); }
                catch (JsonException ex) { onError(ex.Message + " \n\nResponse Text: " + responseText); return; }
                on403Forbidden(responseData);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (webRequest.responseCode == 404) // Not Found
        {
            if (on404NotFound != null)
            {
                on404NotFound(responseText);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (onError != null)
        {
            onError(webRequest.error);
        }
    }

    /// <param name="Authorization">
    /// <para>JWT Authorization header using the Bearer scheme. Example: "Bearer {token}"</para>
    /// </param>
    /// <response code="200">
    /// <para>OK</para>
    /// </response>
    /// <response code="404">
    /// <para>Not Found</para>
    /// </response>
    public async Task GetClansLeaderboardAsync(
        string Authorization, 
        // OK
        Action<ClanLeaderboardResponse> on200OK = null, 
        // Not Found
        Action<string> on404NotFound = null, 
        Action<string> onError = null)
    {
        string url = $"{Url}/clans/leaderboard";
        using (var request = new UnityWebRequest(url, "GET"))
        {
            request.uri = new Uri(url);
            request.SetRequestHeader("Authorization", Authorization.ToString());
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("accept", "application/json");
            request.SetRequestHeader("Content-Type", "application/json");
            request.timeout = 10;
            try
            {
                await request.SendWebRequest();
                GetClansLeaderboardAsyncProcessResponse(request, on200OK, on404NotFound, onError);
            }
            catch (Exception ex)
            {
                GetClansLeaderboardAsyncProcessResponse(request, on200OK, on404NotFound, onError);
            }
        }
    }

    private void GetClansLeaderboardAsyncProcessResponse(UnityWebRequest webRequest, Action<ClanLeaderboardResponse> on200OK, Action<string> on404NotFound, Action<string> onError)
    {
        string responseText = webRequest.downloadHandler?.text ?? string.Empty;
        if (webRequest.responseCode == 200) // OK
        {
            if (on200OK != null)
            {
                ClanLeaderboardResponse responseData;
                try { responseData = System.Text.Json.JsonSerializer.Deserialize<ClanLeaderboardResponse>(responseText); }
                catch (JsonException ex) { onError(ex.Message + " \n\nResponse Text: " + responseText); return; }
                on200OK(responseData);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (webRequest.responseCode == 404) // Not Found
        {
            if (on404NotFound != null)
            {
                on404NotFound(responseText);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (onError != null)
        {
            onError(webRequest.error);
        }
    }

    /// <response code="200">
    /// <para>OK</para>
    /// </response>
    /// <response code="404">
    /// <para>Not Found</para>
    /// </response>
    public async Task GetSeasonsByblockAsync(
        Int64 blockIndex, 
        // OK
        Action<SeasonResponse> on200OK = null, 
        // Not Found
        Action<string> on404NotFound = null, 
        Action<string> onError = null)
    {
        string url = $"{Url}/seasons/by-block/{blockIndex}";
        using (var request = new UnityWebRequest(url, "GET"))
        {
            request.uri = new Uri(url);
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("accept", "application/json");
            request.SetRequestHeader("Content-Type", "application/json");
            request.timeout = 10;
            try
            {
                await request.SendWebRequest();
                GetSeasonsByblockAsyncProcessResponse(request, on200OK, on404NotFound, onError);
            }
            catch (Exception ex)
            {
                GetSeasonsByblockAsyncProcessResponse(request, on200OK, on404NotFound, onError);
            }
        }
    }

    private void GetSeasonsByblockAsyncProcessResponse(UnityWebRequest webRequest, Action<SeasonResponse> on200OK, Action<string> on404NotFound, Action<string> onError)
    {
        string responseText = webRequest.downloadHandler?.text ?? string.Empty;
        if (webRequest.responseCode == 200) // OK
        {
            if (on200OK != null)
            {
                SeasonResponse responseData;
                try { responseData = System.Text.Json.JsonSerializer.Deserialize<SeasonResponse>(responseText); }
                catch (JsonException ex) { onError(ex.Message + " \n\nResponse Text: " + responseText); return; }
                on200OK(responseData);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (webRequest.responseCode == 404) // Not Found
        {
            if (on404NotFound != null)
            {
                on404NotFound(responseText);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (onError != null)
        {
            onError(webRequest.error);
        }
    }

    /// <response code="200">
    /// <para>OK</para>
    /// </response>
    public async Task GetSeasonsClassifybychampionshipAsync(
        Int64 blockIndex, 
        // OK
        Action<SeasonsResponse> on200OK = null, 
        Action<string> onError = null)
    {
        string url = $"{Url}/seasons/classify-by-championship/{blockIndex}";
        using (var request = new UnityWebRequest(url, "GET"))
        {
            request.uri = new Uri(url);
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("accept", "application/json");
            request.SetRequestHeader("Content-Type", "application/json");
            request.timeout = 10;
            try
            {
                await request.SendWebRequest();
                GetSeasonsClassifybychampionshipAsyncProcessResponse(request, on200OK, onError);
            }
            catch (Exception ex)
            {
                GetSeasonsClassifybychampionshipAsyncProcessResponse(request, on200OK, onError);
            }
        }
    }

    private void GetSeasonsClassifybychampionshipAsyncProcessResponse(UnityWebRequest webRequest, Action<SeasonsResponse> on200OK, Action<string> onError)
    {
        string responseText = webRequest.downloadHandler?.text ?? string.Empty;
        if (webRequest.responseCode == 200) // OK
        {
            if (on200OK != null)
            {
                SeasonsResponse responseData;
                try { responseData = System.Text.Json.JsonSerializer.Deserialize<SeasonsResponse>(responseText); }
                catch (JsonException ex) { onError(ex.Message + " \n\nResponse Text: " + responseText); return; }
                on200OK(responseData);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (onError != null)
        {
            onError(webRequest.error);
        }
    }

    /// <param name="Authorization">
    /// <para>JWT Authorization header using the Bearer scheme. Example: "Bearer {token}"</para>
    /// </param>
    /// <response code="200">
    /// <para>TicketStatus</para>
    /// </response>
    public async Task GetTicketsBattleAsync(
        string Authorization, 
        // TicketStatus
        Action<TicketStatusResponse> on200TicketStatus = null, 
        // 
        Action<string> on401 = null, 
        // 
        Action<string> on503 = null, 
        Action<string> onError = null)
    {
        string url = $"{Url}/tickets/battle";
        using (var request = new UnityWebRequest(url, "GET"))
        {
            request.uri = new Uri(url);
            request.SetRequestHeader("Authorization", Authorization.ToString());
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("accept", "application/json");
            request.SetRequestHeader("Content-Type", "application/json");
            request.timeout = 10;
            try
            {
                await request.SendWebRequest();
                GetTicketsBattleAsyncProcessResponse(request, on200TicketStatus, on401, on503, onError);
            }
            catch (Exception ex)
            {
                GetTicketsBattleAsyncProcessResponse(request, on200TicketStatus, on401, on503, onError);
            }
        }
    }

    private void GetTicketsBattleAsyncProcessResponse(UnityWebRequest webRequest, Action<TicketStatusResponse> on200TicketStatus, Action<string> on401, Action<string> on503, Action<string> onError)
    {
        string responseText = webRequest.downloadHandler?.text ?? string.Empty;
        if (webRequest.responseCode == 200) // TicketStatus
        {
            if (on200TicketStatus != null)
            {
                TicketStatusResponse responseData;
                try { responseData = System.Text.Json.JsonSerializer.Deserialize<TicketStatusResponse>(responseText); }
                catch (JsonException ex) { onError(ex.Message + " \n\nResponse Text: " + responseText); return; }
                on200TicketStatus(responseData);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (webRequest.responseCode == 401) // 
        {
            if (on401 != null)
            {
                on401(responseText);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (webRequest.responseCode == 503) // 
        {
            if (on503 != null)
            {
                on503(responseText);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (onError != null)
        {
            onError(webRequest.error);
        }
    }

    /// <param name="Authorization">
    /// <para>JWT Authorization header using the Bearer scheme. Example: "Bearer {token}"</para>
    /// </param>
    /// <response code="200">
    /// <para>TicketStatus</para>
    /// </response>
    public async Task GetTicketsRefreshAsync(
        string Authorization, 
        // TicketStatus
        Action<TicketStatusResponse> on200TicketStatus = null, 
        // 
        Action<string> on401 = null, 
        // 
        Action<string> on503 = null, 
        Action<string> onError = null)
    {
        string url = $"{Url}/tickets/refresh";
        using (var request = new UnityWebRequest(url, "GET"))
        {
            request.uri = new Uri(url);
            request.SetRequestHeader("Authorization", Authorization.ToString());
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("accept", "application/json");
            request.SetRequestHeader("Content-Type", "application/json");
            request.timeout = 10;
            try
            {
                await request.SendWebRequest();
                GetTicketsRefreshAsyncProcessResponse(request, on200TicketStatus, on401, on503, onError);
            }
            catch (Exception ex)
            {
                GetTicketsRefreshAsyncProcessResponse(request, on200TicketStatus, on401, on503, onError);
            }
        }
    }

    private void GetTicketsRefreshAsyncProcessResponse(UnityWebRequest webRequest, Action<TicketStatusResponse> on200TicketStatus, Action<string> on401, Action<string> on503, Action<string> onError)
    {
        string responseText = webRequest.downloadHandler?.text ?? string.Empty;
        if (webRequest.responseCode == 200) // TicketStatus
        {
            if (on200TicketStatus != null)
            {
                TicketStatusResponse responseData;
                try { responseData = System.Text.Json.JsonSerializer.Deserialize<TicketStatusResponse>(responseText); }
                catch (JsonException ex) { onError(ex.Message + " \n\nResponse Text: " + responseText); return; }
                on200TicketStatus(responseData);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (webRequest.responseCode == 401) // 
        {
            if (on401 != null)
            {
                on401(responseText);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (webRequest.responseCode == 503) // 
        {
            if (on503 != null)
            {
                on503(responseText);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (onError != null)
        {
            onError(webRequest.error);
        }
    }

    /// <param name="Authorization">
    /// <para>JWT Authorization header using the Bearer scheme. Example: "Bearer {token}"</para>
    /// </param>
    /// <response code="201">
    /// <para>Purchase Log Id</para>
    /// </response>
    public async Task PostTicketsBattlePurchaseAsync(
        string Authorization, PurchaseTicketRequest requestBody, 
        // Purchase Log Id
        Action<int> on201PurchaseLogId = null, 
        // 
        Action<string> on400 = null, 
        // 
        Action<string> on401 = null, 
        // 
        Action<string> on503 = null, 
        Action<string> onError = null)
    {
        string url = $"{Url}/tickets/battle/purchase";
        using (var request = new UnityWebRequest(url, "POST"))
        {
            request.uri = new Uri(url);
            request.SetRequestHeader("Authorization", Authorization.ToString());
            var bodyString = System.Text.Json.JsonSerializer.Serialize(requestBody);
            var jsonToSend = new UTF8Encoding().GetBytes(bodyString);
            request.uploadHandler = new UploadHandlerRaw(jsonToSend);
            request.uploadHandler.contentType = "application/json";
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("accept", "application/json");
            request.SetRequestHeader("Content-Type", "application/json");
            request.timeout = 10;
            try
            {
                await request.SendWebRequest();
                PostTicketsBattlePurchaseAsyncProcessResponse(request, on201PurchaseLogId, on400, on401, on503, onError);
            }
            catch (Exception ex)
            {
                PostTicketsBattlePurchaseAsyncProcessResponse(request, on201PurchaseLogId, on400, on401, on503, onError);
            }
        }
    }

    private void PostTicketsBattlePurchaseAsyncProcessResponse(UnityWebRequest webRequest, Action<int> on201PurchaseLogId, Action<string> on400, Action<string> on401, Action<string> on503, Action<string> onError)
    {
        string responseText = webRequest.downloadHandler?.text ?? string.Empty;
        if (webRequest.responseCode == 201) // Purchase Log Id
        {
            if (on201PurchaseLogId != null)
            {
                int responseData;
                try { responseData = System.Text.Json.JsonSerializer.Deserialize<int>(responseText); }
                catch (JsonException ex) { onError(ex.Message + " \n\nResponse Text: " + responseText); return; }
                on201PurchaseLogId(responseData);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (webRequest.responseCode == 400) // 
        {
            if (on400 != null)
            {
                on400(responseText);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (webRequest.responseCode == 401) // 
        {
            if (on401 != null)
            {
                on401(responseText);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (webRequest.responseCode == 503) // 
        {
            if (on503 != null)
            {
                on503(responseText);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (onError != null)
        {
            onError(webRequest.error);
        }
    }

    /// <param name="Authorization">
    /// <para>JWT Authorization header using the Bearer scheme. Example: "Bearer {token}"</para>
    /// </param>
    /// <response code="201">
    /// <para>Purchase Log Id</para>
    /// </response>
    public async Task PostTicketsRefreshPurchaseAsync(
        string Authorization, PurchaseTicketRequest requestBody, 
        // Purchase Log Id
        Action<int> on201PurchaseLogId = null, 
        // 
        Action<string> on401 = null, 
        // 
        Action<string> on503 = null, 
        Action<string> onError = null)
    {
        string url = $"{Url}/tickets/refresh/purchase";
        using (var request = new UnityWebRequest(url, "POST"))
        {
            request.uri = new Uri(url);
            request.SetRequestHeader("Authorization", Authorization.ToString());
            var bodyString = System.Text.Json.JsonSerializer.Serialize(requestBody);
            var jsonToSend = new UTF8Encoding().GetBytes(bodyString);
            request.uploadHandler = new UploadHandlerRaw(jsonToSend);
            request.uploadHandler.contentType = "application/json";
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("accept", "application/json");
            request.SetRequestHeader("Content-Type", "application/json");
            request.timeout = 10;
            try
            {
                await request.SendWebRequest();
                PostTicketsRefreshPurchaseAsyncProcessResponse(request, on201PurchaseLogId, on401, on503, onError);
            }
            catch (Exception ex)
            {
                PostTicketsRefreshPurchaseAsyncProcessResponse(request, on201PurchaseLogId, on401, on503, onError);
            }
        }
    }

    private void PostTicketsRefreshPurchaseAsyncProcessResponse(UnityWebRequest webRequest, Action<int> on201PurchaseLogId, Action<string> on401, Action<string> on503, Action<string> onError)
    {
        string responseText = webRequest.downloadHandler?.text ?? string.Empty;
        if (webRequest.responseCode == 201) // Purchase Log Id
        {
            if (on201PurchaseLogId != null)
            {
                int responseData;
                try { responseData = System.Text.Json.JsonSerializer.Deserialize<int>(responseText); }
                catch (JsonException ex) { onError(ex.Message + " \n\nResponse Text: " + responseText); return; }
                on201PurchaseLogId(responseData);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (webRequest.responseCode == 401) // 
        {
            if (on401 != null)
            {
                on401(responseText);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (webRequest.responseCode == 503) // 
        {
            if (on503 != null)
            {
                on503(responseText);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (onError != null)
        {
            onError(webRequest.error);
        }
    }

    /// <param name="Authorization">
    /// <para>JWT Authorization header using the Bearer scheme. Example: "Bearer {token}"</para>
    /// </param>
    /// <response code="200">
    /// <para>Purchase Log Id</para>
    /// </response>
    public async Task GetTicketsBattlePurchaselogsAsync(
        int logId, string Authorization, 
        // Purchase Log Id
        Action<TicketPurchaseLogResponse> on200PurchaseLogId = null, 
        // 
        Action<string> on401 = null, 
        // 
        Action<string> on403 = null, 
        // 
        Action<string> on503 = null, 
        Action<string> onError = null)
    {
        string url = $"{Url}/tickets/battle/purchase-logs/{logId}";
        using (var request = new UnityWebRequest(url, "GET"))
        {
            request.uri = new Uri(url);
            request.SetRequestHeader("Authorization", Authorization.ToString());
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("accept", "application/json");
            request.SetRequestHeader("Content-Type", "application/json");
            request.timeout = 10;
            try
            {
                await request.SendWebRequest();
                GetTicketsBattlePurchaselogsAsyncProcessResponse(request, on200PurchaseLogId, on401, on403, on503, onError);
            }
            catch (Exception ex)
            {
                GetTicketsBattlePurchaselogsAsyncProcessResponse(request, on200PurchaseLogId, on401, on403, on503, onError);
            }
        }
    }

    private void GetTicketsBattlePurchaselogsAsyncProcessResponse(UnityWebRequest webRequest, Action<TicketPurchaseLogResponse> on200PurchaseLogId, Action<string> on401, Action<string> on403, Action<string> on503, Action<string> onError)
    {
        string responseText = webRequest.downloadHandler?.text ?? string.Empty;
        if (webRequest.responseCode == 200) // Purchase Log Id
        {
            if (on200PurchaseLogId != null)
            {
                TicketPurchaseLogResponse responseData;
                try { responseData = System.Text.Json.JsonSerializer.Deserialize<TicketPurchaseLogResponse>(responseText); }
                catch (JsonException ex) { onError(ex.Message + " \n\nResponse Text: " + responseText); return; }
                on200PurchaseLogId(responseData);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (webRequest.responseCode == 401) // 
        {
            if (on401 != null)
            {
                on401(responseText);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (webRequest.responseCode == 403) // 
        {
            if (on403 != null)
            {
                on403(responseText);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (webRequest.responseCode == 503) // 
        {
            if (on503 != null)
            {
                on503(responseText);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (onError != null)
        {
            onError(webRequest.error);
        }
    }

    /// <param name="Authorization">
    /// <para>JWT Authorization header using the Bearer scheme. Example: "Bearer {token}"</para>
    /// </param>
    /// <response code="200">
    /// <para>Purchase Log Id</para>
    /// </response>
    public async Task GetTicketsRefreshPurchaselogsAsync(
        int logId, string Authorization, 
        // Purchase Log Id
        Action<TicketPurchaseLogResponse> on200PurchaseLogId = null, 
        // 
        Action<string> on401 = null, 
        // 
        Action<string> on503 = null, 
        Action<string> onError = null)
    {
        string url = $"{Url}/tickets/refresh/purchase-logs/{logId}";
        using (var request = new UnityWebRequest(url, "GET"))
        {
            request.uri = new Uri(url);
            request.SetRequestHeader("Authorization", Authorization.ToString());
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("accept", "application/json");
            request.SetRequestHeader("Content-Type", "application/json");
            request.timeout = 10;
            try
            {
                await request.SendWebRequest();
                GetTicketsRefreshPurchaselogsAsyncProcessResponse(request, on200PurchaseLogId, on401, on503, onError);
            }
            catch (Exception ex)
            {
                GetTicketsRefreshPurchaselogsAsyncProcessResponse(request, on200PurchaseLogId, on401, on503, onError);
            }
        }
    }

    private void GetTicketsRefreshPurchaselogsAsyncProcessResponse(UnityWebRequest webRequest, Action<TicketPurchaseLogResponse> on200PurchaseLogId, Action<string> on401, Action<string> on503, Action<string> onError)
    {
        string responseText = webRequest.downloadHandler?.text ?? string.Empty;
        if (webRequest.responseCode == 200) // Purchase Log Id
        {
            if (on200PurchaseLogId != null)
            {
                TicketPurchaseLogResponse responseData;
                try { responseData = System.Text.Json.JsonSerializer.Deserialize<TicketPurchaseLogResponse>(responseText); }
                catch (JsonException ex) { onError(ex.Message + " \n\nResponse Text: " + responseText); return; }
                on200PurchaseLogId(responseData);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (webRequest.responseCode == 401) // 
        {
            if (on401 != null)
            {
                on401(responseText);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (webRequest.responseCode == 503) // 
        {
            if (on503 != null)
            {
                on503(responseText);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (onError != null)
        {
            onError(webRequest.error);
        }
    }

    /// <param name="Authorization">
    /// <para>JWT Authorization header using the Bearer scheme. Example: "Bearer {token}"</para>
    /// </param>
    /// <response code="201">
    /// <para>Created</para>
    /// </response>
    /// <response code="401">
    /// <para>Unauthorized</para>
    /// </response>
    /// <response code="409">
    /// <para>Conflict</para>
    /// </response>
    public async Task PostUsersAsync(
        string Authorization, UserRegisterRequest requestBody, 
        // Created
        Action<string> on201Created = null, 
        // Unauthorized
        Action<ProblemDetails> on401Unauthorized = null, 
        // Conflict
        Action<string> on409Conflict = null, 
        Action<string> onError = null)
    {
        string url = $"{Url}/users";
        using (var request = new UnityWebRequest(url, "POST"))
        {
            request.uri = new Uri(url);
            request.SetRequestHeader("Authorization", Authorization.ToString());
            var bodyString = System.Text.Json.JsonSerializer.Serialize(requestBody);
            var jsonToSend = new UTF8Encoding().GetBytes(bodyString);
            request.uploadHandler = new UploadHandlerRaw(jsonToSend);
            request.uploadHandler.contentType = "application/json";
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("accept", "application/json");
            request.SetRequestHeader("Content-Type", "application/json");
            request.timeout = 10;
            try
            {
                await request.SendWebRequest();
                PostUsersAsyncProcessResponse(request, on201Created, on401Unauthorized, on409Conflict, onError);
            }
            catch (Exception ex)
            {
                PostUsersAsyncProcessResponse(request, on201Created, on401Unauthorized, on409Conflict, onError);
            }
        }
    }

    private void PostUsersAsyncProcessResponse(UnityWebRequest webRequest, Action<string> on201Created, Action<ProblemDetails> on401Unauthorized, Action<string> on409Conflict, Action<string> onError)
    {
        string responseText = webRequest.downloadHandler?.text ?? string.Empty;
        if (webRequest.responseCode == 201) // Created
        {
            if (on201Created != null)
            {
                on201Created(responseText);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (webRequest.responseCode == 401) // Unauthorized
        {
            if (on401Unauthorized != null)
            {
                ProblemDetails responseData;
                try { responseData = System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(responseText); }
                catch (JsonException ex) { onError(ex.Message + " \n\nResponse Text: " + responseText); return; }
                on401Unauthorized(responseData);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (webRequest.responseCode == 409) // Conflict
        {
            if (on409Conflict != null)
            {
                on409Conflict(responseText);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (onError != null)
        {
            onError(webRequest.error);
        }
    }

    /// <param name="Authorization">
    /// <para>JWT Authorization header using the Bearer scheme. Example: "Bearer {token}"</para>
    /// </param>
    /// <response code="200">
    /// <para>OK</para>
    /// </response>
    /// <response code="401">
    /// <para>Unauthorized</para>
    /// </response>
    public async Task GetUsersAsync(
        string avatarAddress, string Authorization, 
        // OK
        Action<UserResponse> on200OK = null, 
        // Unauthorized
        Action<ProblemDetails> on401Unauthorized = null, 
        Action<string> onError = null)
    {
        string url = $"{Url}/users/{avatarAddress}";
        using (var request = new UnityWebRequest(url, "GET"))
        {
            request.uri = new Uri(url);
            request.SetRequestHeader("Authorization", Authorization.ToString());
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("accept", "application/json");
            request.SetRequestHeader("Content-Type", "application/json");
            request.timeout = 10;
            try
            {
                await request.SendWebRequest();
                GetUsersAsyncProcessResponse(request, on200OK, on401Unauthorized, onError);
            }
            catch (Exception ex)
            {
                GetUsersAsyncProcessResponse(request, on200OK, on401Unauthorized, onError);
            }
        }
    }

    private void GetUsersAsyncProcessResponse(UnityWebRequest webRequest, Action<UserResponse> on200OK, Action<ProblemDetails> on401Unauthorized, Action<string> onError)
    {
        string responseText = webRequest.downloadHandler?.text ?? string.Empty;
        if (webRequest.responseCode == 200) // OK
        {
            if (on200OK != null)
            {
                UserResponse responseData;
                try { responseData = System.Text.Json.JsonSerializer.Deserialize<UserResponse>(responseText); }
                catch (JsonException ex) { onError(ex.Message + " \n\nResponse Text: " + responseText); return; }
                on200OK(responseData);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (webRequest.responseCode == 401) // Unauthorized
        {
            if (on401Unauthorized != null)
            {
                ProblemDetails responseData;
                try { responseData = System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(responseText); }
                catch (JsonException ex) { onError(ex.Message + " \n\nResponse Text: " + responseText); return; }
                on401Unauthorized(responseData);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (onError != null)
        {
            onError(webRequest.error);
        }
    }

    /// <param name="Authorization">
    /// <para>JWT Authorization header using the Bearer scheme. Example: "Bearer {token}"</para>
    /// </param>
    /// <response code="200">
    /// <para>OK</para>
    /// </response>
    /// <response code="401">
    /// <para>Unauthorized</para>
    /// </response>
    /// <response code="404">
    /// <para>Not Found</para>
    /// </response>
    public async Task GetUsersClassifybychampionshipMedalsAsync(
        Int64 blockIndex, string Authorization, 
        // OK
        Action<ClassifyByBlockMedalsResponse> on200OK = null, 
        // Unauthorized
        Action<ProblemDetails> on401Unauthorized = null, 
        // Not Found
        Action<string> on404NotFound = null, 
        Action<string> onError = null)
    {
        string url = $"{Url}/users/classify-by-championship/medals/{blockIndex}";
        using (var request = new UnityWebRequest(url, "GET"))
        {
            request.uri = new Uri(url);
            request.SetRequestHeader("Authorization", Authorization.ToString());
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("accept", "application/json");
            request.SetRequestHeader("Content-Type", "application/json");
            request.timeout = 10;
            try
            {
                await request.SendWebRequest();
                GetUsersClassifybychampionshipMedalsAsyncProcessResponse(request, on200OK, on401Unauthorized, on404NotFound, onError);
            }
            catch (Exception ex)
            {
                GetUsersClassifybychampionshipMedalsAsyncProcessResponse(request, on200OK, on401Unauthorized, on404NotFound, onError);
            }
        }
    }

    private void GetUsersClassifybychampionshipMedalsAsyncProcessResponse(UnityWebRequest webRequest, Action<ClassifyByBlockMedalsResponse> on200OK, Action<ProblemDetails> on401Unauthorized, Action<string> on404NotFound, Action<string> onError)
    {
        string responseText = webRequest.downloadHandler?.text ?? string.Empty;
        if (webRequest.responseCode == 200) // OK
        {
            if (on200OK != null)
            {
                ClassifyByBlockMedalsResponse responseData;
                try { responseData = System.Text.Json.JsonSerializer.Deserialize<ClassifyByBlockMedalsResponse>(responseText); }
                catch (JsonException ex) { onError(ex.Message + " \n\nResponse Text: " + responseText); return; }
                on200OK(responseData);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (webRequest.responseCode == 401) // Unauthorized
        {
            if (on401Unauthorized != null)
            {
                ProblemDetails responseData;
                try { responseData = System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(responseText); }
                catch (JsonException ex) { onError(ex.Message + " \n\nResponse Text: " + responseText); return; }
                on401Unauthorized(responseData);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (webRequest.responseCode == 404) // Not Found
        {
            if (on404NotFound != null)
            {
                on404NotFound(responseText);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (onError != null)
        {
            onError(webRequest.error);
        }
    }

}}
