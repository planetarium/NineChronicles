//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Do not modify the contents of this file directly.
//     Changes might be overwritten the next time the code is generated.
//     Source URL: http://k8s-arenaser-arenaser-caf72b8307-d45b2a0992a4815e.elb.us-east-2.amazonaws.com/swagger/v1/swagger.json
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Text.Json.Serialization;
using System.Collections.Generic;
using System;
using System.Collections;
using System.Text.Json;
using System.Threading.Tasks;
using System.Net.Http;
using UnityEngine.Networking;
using Cysharp.Threading.Tasks;
using System.Text;
using System.Linq;

public class ArenaServiceClient
{
    private string Url;

    public ArenaServiceClient(string url)
    {
        Url = url;
    }

    public void Dispose()
    {
    }

    public class AvailableOpponentsResponse
    {
        [JsonPropertyName("availableOpponents")]
        public List<ParticipantResponse> AvailableOpponents { get; set; }
    }

    public class BattleLogResponse
    {
        [JsonPropertyName("id")]
        public int Id { get; set; }
        [JsonPropertyName("seasonId")]
        public int SeasonId { get; set; }
        [JsonPropertyName("attackerAvatarAddress")]
        public string? AttackerAvatarAddress { get; set; }
        [JsonPropertyName("defenderAvatarAddress")]
        public string? DefenderAvatarAddress { get; set; }
        [JsonPropertyName("txId")]
        public string? TxId { get; set; }
        [JsonPropertyName("txStatus")]
        public string? TxStatus { get; set; }
        [JsonPropertyName("isVictory")]
        public bool? IsVictory { get; set; }
        [JsonPropertyName("participantScore")]
        public int? ParticipantScore { get; set; }
        [JsonPropertyName("participantScoreChange")]
        public int? ParticipantScoreChange { get; set; }
        [JsonPropertyName("opponentScoreChange")]
        public int? OpponentScoreChange { get; set; }
        [JsonPropertyName("battleBlockIndex")]
        public Int64? BattleBlockIndex { get; set; }
    }

    public class BattleTokenResponse
    {
        [JsonPropertyName("token")]
        public string? Token { get; set; }
        [JsonPropertyName("battleLogId")]
        public int BattleLogId { get; set; }
    }

    public class LeaderboardEntryResponse
    {
        [JsonPropertyName("avatarAddress")]
        public string? AvatarAddress { get; set; }
        [JsonPropertyName("nameWithHash")]
        public string? NameWithHash { get; set; }
        [JsonPropertyName("portraitId")]
        public int PortraitId { get; set; }
        [JsonPropertyName("cp")]
        public Int64 Cp { get; set; }
        [JsonPropertyName("level")]
        public int Level { get; set; }
        [JsonPropertyName("seasonId")]
        public int SeasonId { get; set; }
        [JsonPropertyName("score")]
        public int Score { get; set; }
        [JsonPropertyName("rank")]
        public int Rank { get; set; }
    }

    public class ParticipantResponse
    {
        [JsonPropertyName("avatarAddress")]
        public string? AvatarAddress { get; set; }
        [JsonPropertyName("nameWithHash")]
        public string? NameWithHash { get; set; }
        [JsonPropertyName("portraitId")]
        public int PortraitId { get; set; }
        [JsonPropertyName("cp")]
        public Int64 Cp { get; set; }
        [JsonPropertyName("level")]
        public int Level { get; set; }
        [JsonPropertyName("seasonId")]
        public int SeasonId { get; set; }
        [JsonPropertyName("score")]
        public int Score { get; set; }
    }

    public class ParticipateRequest
    {
        [JsonPropertyName("nameWithHash")]
        public string? NameWithHash { get; set; }
        [JsonPropertyName("portraitId")]
        public int PortraitId { get; set; }
        [JsonPropertyName("cp")]
        public Int64 Cp { get; set; }
        [JsonPropertyName("level")]
        public int Level { get; set; }
    }

    public class ProblemDetails
    {
        [JsonPropertyName("type")]
        public string? Type { get; set; }
        [JsonPropertyName("title")]
        public string? Title { get; set; }
        [JsonPropertyName("status")]
        public int? Status { get; set; }
        [JsonPropertyName("detail")]
        public string? Detail { get; set; }
        [JsonPropertyName("instance")]
        public string? Instance { get; set; }
    }

    public class SeasonResponse
    {
        [JsonPropertyName("id")]
        public int Id { get; set; }
        [JsonPropertyName("startBlockIndex")]
        public Int64 StartBlockIndex { get; set; }
        [JsonPropertyName("endBlockIndex")]
        public Int64 EndBlockIndex { get; set; }
        [JsonPropertyName("interval")]
        public int Interval { get; set; }
    }

    public class UnauthorizedHttpResult
    {
        [JsonPropertyName("statusCode")]
        public int StatusCode { get; set; }
    }

    /// <param name="Authorization">
    /// <para>JWT Authorization header using the Bearer scheme. Example: "Bearer {token}"</para>
    /// </param>
    /// <response code="200">
    /// <para>OK</para>
    /// </response>
    /// <response code="401">
    /// <para>Unauthorized</para>
    /// </response>
    /// <response code="404">
    /// <para>Not Found</para>
    /// </response>
    public async Task GetSeasonsAvailableopponentsAsync(
        int seasonId, Int64 blockIndex, string Authorization, 
        // OK
        Action<AvailableOpponentsResponse> on200OK = null, 
        // Unauthorized
        Action<ProblemDetails> on401Unauthorized = null, 
        // Not Found
        Action<string> on404NotFound = null, 
        Action<string> onError = null)
    {
        string url = $"{Url}/seasons/{seasonId}/available-opponents";
        using (var request = new UnityWebRequest(url, "GET"))
        {
            url += $"?blockIndex={blockIndex}";
            request.uri = new Uri(url);
            request.SetRequestHeader("Authorization", Authorization.ToString());
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("accept", "application/json");
            request.SetRequestHeader("Content-Type", "application/json");
            request.timeout = 10;
            try
            {
                await request.SendWebRequest();
                GetSeasonsAvailableopponentsAsyncProcessResponse(request, on200OK, on401Unauthorized, on404NotFound, onError);
            }
            catch (Exception ex)
            {
                GetSeasonsAvailableopponentsAsyncProcessResponse(request, on200OK, on401Unauthorized, on404NotFound, onError);
            }
        }
    }

    private void GetSeasonsAvailableopponentsAsyncProcessResponse(UnityWebRequest webRequest, Action<AvailableOpponentsResponse> on200OK, Action<ProblemDetails> on401Unauthorized, Action<string> on404NotFound, Action<string> onError)
    {
        string responseText = webRequest.downloadHandler?.text ?? string.Empty;
        if (webRequest.responseCode == 200) // OK
        {
            if (on200OK != null)
            {
                AvailableOpponentsResponse responseData;
                try { responseData = System.Text.Json.JsonSerializer.Deserialize<AvailableOpponentsResponse>(responseText); }
                catch (JsonException ex) { onError(ex.Message + " \n\nResponse Text: " + responseText); return; }
                on200OK(responseData);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (webRequest.responseCode == 401) // Unauthorized
        {
            if (on401Unauthorized != null)
            {
                ProblemDetails responseData;
                try { responseData = System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(responseText); }
                catch (JsonException ex) { onError(ex.Message + " \n\nResponse Text: " + responseText); return; }
                on401Unauthorized(responseData);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (webRequest.responseCode == 404) // Not Found
        {
            if (on404NotFound != null)
            {
                on404NotFound(responseText);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (onError != null)
        {
            onError(webRequest.error);
        }
    }

    /// <param name="Authorization">
    /// <para>JWT Authorization header using the Bearer scheme. Example: "Bearer {token}"</para>
    /// </param>
    /// <response code="201">
    /// <para>Created</para>
    /// </response>
    /// <response code="401">
    /// <para>Unauthorized</para>
    /// </response>
    /// <response code="404">
    /// <para>Not Found</para>
    /// </response>
    public async Task PostSeasonsAvailableopponentsAsync(
        int seasonId, string Authorization, 
        // Created
        Action<string> on201Created = null, 
        // Unauthorized
        Action<UnauthorizedHttpResult> on401Unauthorized = null, 
        // Not Found
        Action<string> on404NotFound = null, 
        Action<string> onError = null)
    {
        string url = $"{Url}/seasons/{seasonId}/available-opponents";
        using (var request = new UnityWebRequest(url, "POST"))
        {
            request.uri = new Uri(url);
            request.SetRequestHeader("Authorization", Authorization.ToString());
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("accept", "application/json");
            request.SetRequestHeader("Content-Type", "application/json");
            request.timeout = 10;
            try
            {
                await request.SendWebRequest();
                PostSeasonsAvailableopponentsAsyncProcessResponse(request, on201Created, on401Unauthorized, on404NotFound, onError);
            }
            catch (Exception ex)
            {
                PostSeasonsAvailableopponentsAsyncProcessResponse(request, on201Created, on401Unauthorized, on404NotFound, onError);
            }
        }
    }

    private void PostSeasonsAvailableopponentsAsyncProcessResponse(UnityWebRequest webRequest, Action<string> on201Created, Action<UnauthorizedHttpResult> on401Unauthorized, Action<string> on404NotFound, Action<string> onError)
    {
        string responseText = webRequest.downloadHandler?.text ?? string.Empty;
        if (webRequest.responseCode == 201) // Created
        {
            if (on201Created != null)
            {
                on201Created(responseText);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (webRequest.responseCode == 401) // Unauthorized
        {
            if (on401Unauthorized != null)
            {
                UnauthorizedHttpResult responseData;
                try { responseData = System.Text.Json.JsonSerializer.Deserialize<UnauthorizedHttpResult>(responseText); }
                catch (JsonException ex) { onError(ex.Message + " \n\nResponse Text: " + responseText); return; }
                on401Unauthorized(responseData);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (webRequest.responseCode == 404) // Not Found
        {
            if (on404NotFound != null)
            {
                on404NotFound(responseText);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (onError != null)
        {
            onError(webRequest.error);
        }
    }

    /// <param name="Authorization">
    /// <para>JWT Authorization header using the Bearer scheme. Example: "Bearer {token}"</para>
    /// </param>
    /// <response code="200">
    /// <para>OK</para>
    /// </response>
    /// <response code="401">
    /// <para>Unauthorized</para>
    /// </response>
    /// <response code="404">
    /// <para>Not Found</para>
    /// </response>
    public async Task GetSeasonsBattleTokenAsync(
        int seasonId, string opponentAvatarAddress, string Authorization, 
        // OK
        Action<BattleTokenResponse> on200OK = null, 
        // Unauthorized
        Action<UnauthorizedHttpResult> on401Unauthorized = null, 
        // Not Found
        Action<string> on404NotFound = null, 
        Action<string> onError = null)
    {
        string url = $"{Url}/seasons/{seasonId}/battle/token";
        using (var request = new UnityWebRequest(url, "GET"))
        {
            url += $"?opponentAvatarAddress={opponentAvatarAddress}";
            request.uri = new Uri(url);
            request.SetRequestHeader("Authorization", Authorization.ToString());
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("accept", "application/json");
            request.SetRequestHeader("Content-Type", "application/json");
            request.timeout = 10;
            try
            {
                await request.SendWebRequest();
                GetSeasonsBattleTokenAsyncProcessResponse(request, on200OK, on401Unauthorized, on404NotFound, onError);
            }
            catch (Exception ex)
            {
                GetSeasonsBattleTokenAsyncProcessResponse(request, on200OK, on401Unauthorized, on404NotFound, onError);
            }
        }
    }

    private void GetSeasonsBattleTokenAsyncProcessResponse(UnityWebRequest webRequest, Action<BattleTokenResponse> on200OK, Action<UnauthorizedHttpResult> on401Unauthorized, Action<string> on404NotFound, Action<string> onError)
    {
        string responseText = webRequest.downloadHandler?.text ?? string.Empty;
        if (webRequest.responseCode == 200) // OK
        {
            if (on200OK != null)
            {
                BattleTokenResponse responseData;
                try { responseData = System.Text.Json.JsonSerializer.Deserialize<BattleTokenResponse>(responseText); }
                catch (JsonException ex) { onError(ex.Message + " \n\nResponse Text: " + responseText); return; }
                on200OK(responseData);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (webRequest.responseCode == 401) // Unauthorized
        {
            if (on401Unauthorized != null)
            {
                UnauthorizedHttpResult responseData;
                try { responseData = System.Text.Json.JsonSerializer.Deserialize<UnauthorizedHttpResult>(responseText); }
                catch (JsonException ex) { onError(ex.Message + " \n\nResponse Text: " + responseText); return; }
                on401Unauthorized(responseData);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (webRequest.responseCode == 404) // Not Found
        {
            if (on404NotFound != null)
            {
                on404NotFound(responseText);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (onError != null)
        {
            onError(webRequest.error);
        }
    }

    /// <param name="Authorization">
    /// <para>JWT Authorization header using the Bearer scheme. Example: "Bearer {token}"</para>
    /// </param>
    /// <response code="200">
    /// <para>OK</para>
    /// </response>
    /// <response code="401">
    /// <para>Unauthorized</para>
    /// </response>
    /// <response code="404">
    /// <para>Not Found</para>
    /// </response>
    public async Task PostSeasonsBattleRequestAsync(
        string txId, int logId, int seasonId, string Authorization, 
        // OK
        Action<string> on200OK = null, 
        // Unauthorized
        Action<UnauthorizedHttpResult> on401Unauthorized = null, 
        // Not Found
        Action<string> on404NotFound = null, 
        Action<string> onError = null)
    {
        string url = $"{Url}/seasons/{seasonId}/battle/request";
        using (var request = new UnityWebRequest(url, "POST"))
        {
            url += $"?txId={txId}&logId={logId}";
            request.uri = new Uri(url);
            request.SetRequestHeader("Authorization", Authorization.ToString());
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("accept", "application/json");
            request.SetRequestHeader("Content-Type", "application/json");
            request.timeout = 10;
            try
            {
                await request.SendWebRequest();
                PostSeasonsBattleRequestAsyncProcessResponse(request, on200OK, on401Unauthorized, on404NotFound, onError);
            }
            catch (Exception ex)
            {
                PostSeasonsBattleRequestAsyncProcessResponse(request, on200OK, on401Unauthorized, on404NotFound, onError);
            }
        }
    }

    private void PostSeasonsBattleRequestAsyncProcessResponse(UnityWebRequest webRequest, Action<string> on200OK, Action<UnauthorizedHttpResult> on401Unauthorized, Action<string> on404NotFound, Action<string> onError)
    {
        string responseText = webRequest.downloadHandler?.text ?? string.Empty;
        if (webRequest.responseCode == 200) // OK
        {
            if (on200OK != null)
            {
                on200OK(responseText);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (webRequest.responseCode == 401) // Unauthorized
        {
            if (on401Unauthorized != null)
            {
                UnauthorizedHttpResult responseData;
                try { responseData = System.Text.Json.JsonSerializer.Deserialize<UnauthorizedHttpResult>(responseText); }
                catch (JsonException ex) { onError(ex.Message + " \n\nResponse Text: " + responseText); return; }
                on401Unauthorized(responseData);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (webRequest.responseCode == 404) // Not Found
        {
            if (on404NotFound != null)
            {
                on404NotFound(responseText);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (onError != null)
        {
            onError(webRequest.error);
        }
    }

    /// <param name="Authorization">
    /// <para>JWT Authorization header using the Bearer scheme. Example: "Bearer {token}"</para>
    /// </param>
    /// <response code="200">
    /// <para>OK</para>
    /// </response>
    /// <response code="401">
    /// <para>Unauthorized</para>
    /// </response>
    /// <response code="404">
    /// <para>Not Found</para>
    /// </response>
    public async Task GetSeasonsBattleAsync(
        int battleLogId, int seasonId, string Authorization, 
        // OK
        Action<BattleLogResponse> on200OK = null, 
        // Unauthorized
        Action<UnauthorizedHttpResult> on401Unauthorized = null, 
        // Not Found
        Action<string> on404NotFound = null, 
        Action<string> onError = null)
    {
        string url = $"{Url}/seasons/{seasonId}/battle/{battleLogId}";
        using (var request = new UnityWebRequest(url, "GET"))
        {
            request.uri = new Uri(url);
            request.SetRequestHeader("Authorization", Authorization.ToString());
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("accept", "application/json");
            request.SetRequestHeader("Content-Type", "application/json");
            request.timeout = 10;
            try
            {
                await request.SendWebRequest();
                GetSeasonsBattleAsyncProcessResponse(request, on200OK, on401Unauthorized, on404NotFound, onError);
            }
            catch (Exception ex)
            {
                GetSeasonsBattleAsyncProcessResponse(request, on200OK, on401Unauthorized, on404NotFound, onError);
            }
        }
    }

    private void GetSeasonsBattleAsyncProcessResponse(UnityWebRequest webRequest, Action<BattleLogResponse> on200OK, Action<UnauthorizedHttpResult> on401Unauthorized, Action<string> on404NotFound, Action<string> onError)
    {
        string responseText = webRequest.downloadHandler?.text ?? string.Empty;
        if (webRequest.responseCode == 200) // OK
        {
            if (on200OK != null)
            {
                BattleLogResponse responseData;
                try { responseData = System.Text.Json.JsonSerializer.Deserialize<BattleLogResponse>(responseText); }
                catch (JsonException ex) { onError(ex.Message + " \n\nResponse Text: " + responseText); return; }
                on200OK(responseData);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (webRequest.responseCode == 401) // Unauthorized
        {
            if (on401Unauthorized != null)
            {
                UnauthorizedHttpResult responseData;
                try { responseData = System.Text.Json.JsonSerializer.Deserialize<UnauthorizedHttpResult>(responseText); }
                catch (JsonException ex) { onError(ex.Message + " \n\nResponse Text: " + responseText); return; }
                on401Unauthorized(responseData);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (webRequest.responseCode == 404) // Not Found
        {
            if (on404NotFound != null)
            {
                on404NotFound(responseText);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (onError != null)
        {
            onError(webRequest.error);
        }
    }

    /// <response code="200">
    /// <para>OK</para>
    /// </response>
    /// <response code="401">
    /// <para>Unauthorized</para>
    /// </response>
    /// <response code="404">
    /// <para>Not Found</para>
    /// </response>
    public async Task GetSeasonsLeaderboardParticipantsAsync(
        int seasonId, string avatarAddress, 
        // OK
        Action<LeaderboardEntryResponse> on200OK = null, 
        // Unauthorized
        Action<ProblemDetails> on401Unauthorized = null, 
        // Not Found
        Action<string> on404NotFound = null, 
        Action<string> onError = null)
    {
        string url = $"{Url}/seasons/{seasonId}/leaderboard/participants/{avatarAddress}";
        using (var request = new UnityWebRequest(url, "GET"))
        {
            request.uri = new Uri(url);
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("accept", "application/json");
            request.SetRequestHeader("Content-Type", "application/json");
            request.timeout = 10;
            try
            {
                await request.SendWebRequest();
                GetSeasonsLeaderboardParticipantsAsyncProcessResponse(request, on200OK, on401Unauthorized, on404NotFound, onError);
            }
            catch (Exception ex)
            {
                GetSeasonsLeaderboardParticipantsAsyncProcessResponse(request, on200OK, on401Unauthorized, on404NotFound, onError);
            }
        }
    }

    private void GetSeasonsLeaderboardParticipantsAsyncProcessResponse(UnityWebRequest webRequest, Action<LeaderboardEntryResponse> on200OK, Action<ProblemDetails> on401Unauthorized, Action<string> on404NotFound, Action<string> onError)
    {
        string responseText = webRequest.downloadHandler?.text ?? string.Empty;
        if (webRequest.responseCode == 200) // OK
        {
            if (on200OK != null)
            {
                LeaderboardEntryResponse responseData;
                try { responseData = System.Text.Json.JsonSerializer.Deserialize<LeaderboardEntryResponse>(responseText); }
                catch (JsonException ex) { onError(ex.Message + " \n\nResponse Text: " + responseText); return; }
                on200OK(responseData);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (webRequest.responseCode == 401) // Unauthorized
        {
            if (on401Unauthorized != null)
            {
                ProblemDetails responseData;
                try { responseData = System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(responseText); }
                catch (JsonException ex) { onError(ex.Message + " \n\nResponse Text: " + responseText); return; }
                on401Unauthorized(responseData);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (webRequest.responseCode == 404) // Not Found
        {
            if (on404NotFound != null)
            {
                on404NotFound(responseText);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (onError != null)
        {
            onError(webRequest.error);
        }
    }

    /// <param name="Authorization">
    /// <para>JWT Authorization header using the Bearer scheme. Example: "Bearer {token}"</para>
    /// </param>
    /// <response code="201">
    /// <para>Created</para>
    /// </response>
    /// <response code="401">
    /// <para>Unauthorized</para>
    /// </response>
    /// <response code="404">
    /// <para>Not Found</para>
    /// </response>
    /// <response code="409">
    /// <para>Conflict</para>
    /// </response>
    public async Task PostSeasonsParticipantsAsync(
        int seasonId, string Authorization, ParticipateRequest requestBody, 
        // Created
        Action<string> on201Created = null, 
        // Unauthorized
        Action<ProblemDetails> on401Unauthorized = null, 
        // Not Found
        Action<string> on404NotFound = null, 
        // Conflict
        Action<string> on409Conflict = null, 
        Action<string> onError = null)
    {
        string url = $"{Url}/seasons/{seasonId}/participants";
        using (var request = new UnityWebRequest(url, "POST"))
        {
            request.uri = new Uri(url);
            request.SetRequestHeader("Authorization", Authorization.ToString());
            var bodyString = System.Text.Json.JsonSerializer.Serialize(requestBody);
            var jsonToSend = new UTF8Encoding().GetBytes(bodyString);
            request.uploadHandler = new UploadHandlerRaw(jsonToSend);
            request.uploadHandler.contentType = "application/json";
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("accept", "application/json");
            request.SetRequestHeader("Content-Type", "application/json");
            request.timeout = 10;
            try
            {
                await request.SendWebRequest();
                PostSeasonsParticipantsAsyncProcessResponse(request, on201Created, on401Unauthorized, on404NotFound, on409Conflict, onError);
            }
            catch (Exception ex)
            {
                PostSeasonsParticipantsAsyncProcessResponse(request, on201Created, on401Unauthorized, on404NotFound, on409Conflict, onError);
            }
        }
    }

    private void PostSeasonsParticipantsAsyncProcessResponse(UnityWebRequest webRequest, Action<string> on201Created, Action<ProblemDetails> on401Unauthorized, Action<string> on404NotFound, Action<string> on409Conflict, Action<string> onError)
    {
        string responseText = webRequest.downloadHandler?.text ?? string.Empty;
        if (webRequest.responseCode == 201) // Created
        {
            if (on201Created != null)
            {
                on201Created(responseText);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (webRequest.responseCode == 401) // Unauthorized
        {
            if (on401Unauthorized != null)
            {
                ProblemDetails responseData;
                try { responseData = System.Text.Json.JsonSerializer.Deserialize<ProblemDetails>(responseText); }
                catch (JsonException ex) { onError(ex.Message + " \n\nResponse Text: " + responseText); return; }
                on401Unauthorized(responseData);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (webRequest.responseCode == 404) // Not Found
        {
            if (on404NotFound != null)
            {
                on404NotFound(responseText);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (webRequest.responseCode == 409) // Conflict
        {
            if (on409Conflict != null)
            {
                on409Conflict(responseText);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (onError != null)
        {
            onError(webRequest.error);
        }
    }

    /// <response code="200">
    /// <para>OK</para>
    /// </response>
    /// <response code="404">
    /// <para>Not Found</para>
    /// </response>
    public async Task GetSeasonsByblockAsync(
        int blockIndex, 
        // OK
        Action<SeasonResponse> on200OK = null, 
        // Not Found
        Action<string> on404NotFound = null, 
        Action<string> onError = null)
    {
        string url = $"{Url}/seasons/by-block/{blockIndex}";
        using (var request = new UnityWebRequest(url, "GET"))
        {
            request.uri = new Uri(url);
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("accept", "application/json");
            request.SetRequestHeader("Content-Type", "application/json");
            request.timeout = 10;
            try
            {
                await request.SendWebRequest();
                GetSeasonsByblockAsyncProcessResponse(request, on200OK, on404NotFound, onError);
            }
            catch (Exception ex)
            {
                GetSeasonsByblockAsyncProcessResponse(request, on200OK, on404NotFound, onError);
            }
        }
    }

    private void GetSeasonsByblockAsyncProcessResponse(UnityWebRequest webRequest, Action<SeasonResponse> on200OK, Action<string> on404NotFound, Action<string> onError)
    {
        string responseText = webRequest.downloadHandler?.text ?? string.Empty;
        if (webRequest.responseCode == 200) // OK
        {
            if (on200OK != null)
            {
                SeasonResponse responseData;
                try { responseData = System.Text.Json.JsonSerializer.Deserialize<SeasonResponse>(responseText); }
                catch (JsonException ex) { onError(ex.Message + " \n\nResponse Text: " + responseText); return; }
                on200OK(responseData);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (webRequest.responseCode == 404) // Not Found
        {
            if (on404NotFound != null)
            {
                on404NotFound(responseText);
            }
            else if (onError != null)
            {
                onError(responseText);
            }
            return;
        }
        if (onError != null)
        {
            onError(webRequest.error);
        }
    }

}
