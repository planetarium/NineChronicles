//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Do not modify the contents of this file directly.
//     Changes might be overwritten the next time the code is generated.
//     Source URL: http://k8s-arenaser-arenaser-caf72b8307-d45b2a0992a4815e.elb.us-east-2.amazonaws.com/swagger/v1/swagger.json
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Text.Json.Serialization;
using System.Collections.Generic;
using System;
using System.Collections;
using System.Text.Json;
using System.Threading.Tasks;
using System.Net.Http;
using UnityEngine.Networking;
using Cysharp.Threading.Tasks;
using System.Text;
using System.Linq;

public class ArenaServiceClient
{
    private string Url;

    public ArenaServiceClient(string url)
    {
        Url = url;
    }

    public void Dispose()
    {
    }

    public class AvailableOpponentsResponse
    {
        [JsonPropertyName("availableOpponents")]
        public List<ParticipantResponse> AvailableOpponents { get; set; }
    }

    public class LeaderboardEntryResponse
    {
        [JsonPropertyName("avatarAddress")]
        public string AvatarAddress { get; set; }
        [JsonPropertyName("nameWithHash")]
        public string NameWithHash { get; set; }
        [JsonPropertyName("portraitId")]
        public int PortraitId { get; set; }
        [JsonPropertyName("cp")]
        public Int64 Cp { get; set; }
        [JsonPropertyName("level")]
        public int Level { get; set; }
        [JsonPropertyName("seasonId")]
        public int SeasonId { get; set; }
        [JsonPropertyName("score")]
        public int Score { get; set; }
        [JsonPropertyName("rank")]
        public int Rank { get; set; }
    }

    public class ParticipantResponse
    {
        [JsonPropertyName("avatarAddress")]
        public string AvatarAddress { get; set; }
        [JsonPropertyName("nameWithHash")]
        public string NameWithHash { get; set; }
        [JsonPropertyName("portraitId")]
        public int PortraitId { get; set; }
        [JsonPropertyName("cp")]
        public Int64 Cp { get; set; }
        [JsonPropertyName("level")]
        public int Level { get; set; }
        [JsonPropertyName("seasonId")]
        public int SeasonId { get; set; }
        [JsonPropertyName("score")]
        public int Score { get; set; }
    }

    public class ParticipateRequest
    {
        [JsonPropertyName("nameWithHash")]
        public string NameWithHash { get; set; }
        [JsonPropertyName("portraitId")]
        public int PortraitId { get; set; }
        [JsonPropertyName("cp")]
        public Int64 Cp { get; set; }
        [JsonPropertyName("level")]
        public int Level { get; set; }
    }

    public class SeasonResponse
    {
        [JsonPropertyName("id")]
        public int Id { get; set; }
        [JsonPropertyName("startBlockIndex")]
        public Int64 StartBlockIndex { get; set; }
        [JsonPropertyName("endBlockIndex")]
        public Int64 EndBlockIndex { get; set; }
        [JsonPropertyName("interval")]
        public int Interval { get; set; }
    }

    public class StringConflict
    {
        [JsonPropertyName("value")]
        public string Value { get; set; }
        [JsonPropertyName("statusCode")]
        public int StatusCode { get; set; }
    }

    public class StringNotFound
    {
        [JsonPropertyName("value")]
        public string Value { get; set; }
        [JsonPropertyName("statusCode")]
        public int StatusCode { get; set; }
    }

    public class UnauthorizedHttpResult
    {
        [JsonPropertyName("statusCode")]
        public int StatusCode { get; set; }
    }

    /// <param name="Authorization">
    /// <para>JWT Authorization header using the Bearer scheme. Example: "Bearer {token}"</para>
    /// </param>
    /// <response code="200">
    /// <para>OK</para>
    /// </response>
    /// <response code="401">
    /// <para>Unauthorized</para>
    /// </response>
    /// <response code="404">
    /// <para>Not Found</para>
    /// </response>
    public async Task GetSeasonsAvailableopponentsAsync(
        int seasonId, Int64 blockIndex, string Authorization, 
        // OK
        Action<AvailableOpponentsResponse> on200OK = null, 
        // Unauthorized
        Action<UnauthorizedHttpResult> on401Unauthorized = null, 
        // Not Found
        Action<StringNotFound> on404NotFound = null, 
        Action<string> onError = null)
    {
        string url = $"{Url}/seasons/{seasonId}/available-opponents";
        using (var request = new UnityWebRequest(url, "GET"))
        {
            url += $"?blockIndex={blockIndex}";
            request.uri = new Uri(url);
            request.SetRequestHeader("Authorization", Authorization.ToString());
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("accept", "application/json");
            request.SetRequestHeader("Content-Type", "application/json");
            request.timeout = 10;
            try
            {
                await request.SendWebRequest();
                if (request.responseCode == 200) // OK
                {
                    string responseBody = request.downloadHandler.text;
                    AvailableOpponentsResponse result = System.Text.Json.JsonSerializer.Deserialize<AvailableOpponentsResponse>(responseBody);
                    on200OK?.Invoke(result);
                    return;
                }
                if (request.responseCode == 401) // Unauthorized
                {
                    string responseBody = request.downloadHandler.text;
                    UnauthorizedHttpResult result = System.Text.Json.JsonSerializer.Deserialize<UnauthorizedHttpResult>(responseBody);
                    on401Unauthorized?.Invoke(result);
                    return;
                }
                if (request.responseCode == 404) // Not Found
                {
                    string responseBody = request.downloadHandler.text;
                    StringNotFound result = System.Text.Json.JsonSerializer.Deserialize<StringNotFound>(responseBody);
                    on404NotFound?.Invoke(result);
                    return;
                }
                if (request.result != UnityWebRequest.Result.Success)
                {
                    onError?.Invoke(request.error);
                    return;
                }
            }
            catch (Exception ex)
            {
                onError?.Invoke(ex.Message);
            }
        }
    }

    /// <param name="Authorization">
    /// <para>JWT Authorization header using the Bearer scheme. Example: "Bearer {token}"</para>
    /// </param>
    /// <response code="201">
    /// <para>Created</para>
    /// </response>
    /// <response code="401">
    /// <para>Unauthorized</para>
    /// </response>
    /// <response code="404">
    /// <para>Not Found</para>
    /// </response>
    public async Task PostSeasonsAvailableopponentsAsync(
        int seasonId, string Authorization, 
        // Created
        Action<string> on201Created = null, 
        // Unauthorized
        Action<UnauthorizedHttpResult> on401Unauthorized = null, 
        // Not Found
        Action<StringNotFound> on404NotFound = null, 
        Action<string> onError = null)
    {
        string url = $"{Url}/seasons/{seasonId}/available-opponents";
        using (var request = new UnityWebRequest(url, "POST"))
        {
            request.uri = new Uri(url);
            request.SetRequestHeader("Authorization", Authorization.ToString());
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("accept", "application/json");
            request.SetRequestHeader("Content-Type", "application/json");
            request.timeout = 10;
            try
            {
                await request.SendWebRequest();
                if (request.responseCode == 201) // Created
                {
                    string responseBody = request.downloadHandler.text;
                    on201Created?.Invoke(responseBody);
                    return;
                }
                if (request.responseCode == 401) // Unauthorized
                {
                    string responseBody = request.downloadHandler.text;
                    UnauthorizedHttpResult result = System.Text.Json.JsonSerializer.Deserialize<UnauthorizedHttpResult>(responseBody);
                    on401Unauthorized?.Invoke(result);
                    return;
                }
                if (request.responseCode == 404) // Not Found
                {
                    string responseBody = request.downloadHandler.text;
                    StringNotFound result = System.Text.Json.JsonSerializer.Deserialize<StringNotFound>(responseBody);
                    on404NotFound?.Invoke(result);
                    return;
                }
                if (request.result != UnityWebRequest.Result.Success)
                {
                    onError?.Invoke(request.error);
                    return;
                }
            }
            catch (Exception ex)
            {
                onError?.Invoke(ex.Message);
            }
        }
    }

    /// <param name="Authorization">
    /// <para>JWT Authorization header using the Bearer scheme. Example: "Bearer {token}"</para>
    /// </param>
    /// <response code="200">
    /// <para>OK</para>
    /// </response>
    /// <response code="401">
    /// <para>Unauthorized</para>
    /// </response>
    /// <response code="404">
    /// <para>Not Found</para>
    /// </response>
    public async Task GetSeasonsBattleTokenAsync(
        int seasonId, string opponentAvatarAddress, string Authorization, 
        // OK
        Action<string> on200OK = null, 
        // Unauthorized
        Action<UnauthorizedHttpResult> on401Unauthorized = null, 
        // Not Found
        Action<StringNotFound> on404NotFound = null, 
        Action<string> onError = null)
    {
        string url = $"{Url}/seasons/{seasonId}/battle/token";
        using (var request = new UnityWebRequest(url, "GET"))
        {
            url += $"?opponentAvatarAddress={opponentAvatarAddress}";
            request.uri = new Uri(url);
            request.SetRequestHeader("Authorization", Authorization.ToString());
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("accept", "application/json");
            request.SetRequestHeader("Content-Type", "application/json");
            request.timeout = 10;
            try
            {
                await request.SendWebRequest();
                if (request.responseCode == 200) // OK
                {
                    string responseBody = request.downloadHandler.text;
                    on200OK?.Invoke(responseBody);
                    return;
                }
                if (request.responseCode == 401) // Unauthorized
                {
                    string responseBody = request.downloadHandler.text;
                    UnauthorizedHttpResult result = System.Text.Json.JsonSerializer.Deserialize<UnauthorizedHttpResult>(responseBody);
                    on401Unauthorized?.Invoke(result);
                    return;
                }
                if (request.responseCode == 404) // Not Found
                {
                    string responseBody = request.downloadHandler.text;
                    StringNotFound result = System.Text.Json.JsonSerializer.Deserialize<StringNotFound>(responseBody);
                    on404NotFound?.Invoke(result);
                    return;
                }
                if (request.result != UnityWebRequest.Result.Success)
                {
                    onError?.Invoke(request.error);
                    return;
                }
            }
            catch (Exception ex)
            {
                onError?.Invoke(ex.Message);
            }
        }
    }

    /// <param name="Authorization">
    /// <para>JWT Authorization header using the Bearer scheme. Example: "Bearer {token}"</para>
    /// </param>
    /// <response code="200">
    /// <para>OK</para>
    /// </response>
    /// <response code="401">
    /// <para>Unauthorized</para>
    /// </response>
    /// <response code="404">
    /// <para>Not Found</para>
    /// </response>
    public async Task PostSeasonsBattleRequestAsync(
        string txId, int logId, string seasonId, string Authorization, 
        // OK
        Action<string> on200OK = null, 
        // Unauthorized
        Action<UnauthorizedHttpResult> on401Unauthorized = null, 
        // Not Found
        Action<StringNotFound> on404NotFound = null, 
        Action<string> onError = null)
    {
        string url = $"{Url}/seasons/{seasonId}/battle/request";
        using (var request = new UnityWebRequest(url, "POST"))
        {
            url += $"?txId={txId}&logId={logId}";
            request.uri = new Uri(url);
            request.SetRequestHeader("Authorization", Authorization.ToString());
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("accept", "application/json");
            request.SetRequestHeader("Content-Type", "application/json");
            request.timeout = 10;
            try
            {
                await request.SendWebRequest();
                if (request.responseCode == 200) // OK
                {
                    string responseBody = request.downloadHandler.text;
                    on200OK?.Invoke(responseBody);
                    return;
                }
                if (request.responseCode == 401) // Unauthorized
                {
                    string responseBody = request.downloadHandler.text;
                    UnauthorizedHttpResult result = System.Text.Json.JsonSerializer.Deserialize<UnauthorizedHttpResult>(responseBody);
                    on401Unauthorized?.Invoke(result);
                    return;
                }
                if (request.responseCode == 404) // Not Found
                {
                    string responseBody = request.downloadHandler.text;
                    StringNotFound result = System.Text.Json.JsonSerializer.Deserialize<StringNotFound>(responseBody);
                    on404NotFound?.Invoke(result);
                    return;
                }
                if (request.result != UnityWebRequest.Result.Success)
                {
                    onError?.Invoke(request.error);
                    return;
                }
            }
            catch (Exception ex)
            {
                onError?.Invoke(ex.Message);
            }
        }
    }

    /// <param name="Authorization">
    /// <para>JWT Authorization header using the Bearer scheme. Example: "Bearer {token}"</para>
    /// </param>
    /// <response code="200">
    /// <para>OK</para>
    /// </response>
    /// <response code="401">
    /// <para>Unauthorized</para>
    /// </response>
    /// <response code="404">
    /// <para>Not Found</para>
    /// </response>
    public async Task GetSeasonsBattleAsync(
        int battleLogId, string seasonId, string Authorization, 
        // OK
        Action<string> on200OK = null, 
        // Unauthorized
        Action<UnauthorizedHttpResult> on401Unauthorized = null, 
        // Not Found
        Action<StringNotFound> on404NotFound = null, 
        Action<string> onError = null)
    {
        string url = $"{Url}/seasons/{seasonId}/battle/{battleLogId}";
        using (var request = new UnityWebRequest(url, "GET"))
        {
            request.uri = new Uri(url);
            request.SetRequestHeader("Authorization", Authorization.ToString());
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("accept", "application/json");
            request.SetRequestHeader("Content-Type", "application/json");
            request.timeout = 10;
            try
            {
                await request.SendWebRequest();
                if (request.responseCode == 200) // OK
                {
                    string responseBody = request.downloadHandler.text;
                    on200OK?.Invoke(responseBody);
                    return;
                }
                if (request.responseCode == 401) // Unauthorized
                {
                    string responseBody = request.downloadHandler.text;
                    UnauthorizedHttpResult result = System.Text.Json.JsonSerializer.Deserialize<UnauthorizedHttpResult>(responseBody);
                    on401Unauthorized?.Invoke(result);
                    return;
                }
                if (request.responseCode == 404) // Not Found
                {
                    string responseBody = request.downloadHandler.text;
                    StringNotFound result = System.Text.Json.JsonSerializer.Deserialize<StringNotFound>(responseBody);
                    on404NotFound?.Invoke(result);
                    return;
                }
                if (request.result != UnityWebRequest.Result.Success)
                {
                    onError?.Invoke(request.error);
                    return;
                }
            }
            catch (Exception ex)
            {
                onError?.Invoke(ex.Message);
            }
        }
    }

    /// <response code="200">
    /// <para>OK</para>
    /// </response>
    /// <response code="401">
    /// <para>Unauthorized</para>
    /// </response>
    /// <response code="404">
    /// <para>Not Found</para>
    /// </response>
    public async Task GetSeasonsLeaderboardParticipantsAsync(
        int seasonId, string avatarAddress, 
        // OK
        Action<LeaderboardEntryResponse> on200OK = null, 
        // Unauthorized
        Action<UnauthorizedHttpResult> on401Unauthorized = null, 
        // Not Found
        Action<StringNotFound> on404NotFound = null, 
        Action<string> onError = null)
    {
        string url = $"{Url}/seasons/{seasonId}/leaderboard/participants/{avatarAddress}";
        using (var request = new UnityWebRequest(url, "GET"))
        {
            request.uri = new Uri(url);
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("accept", "application/json");
            request.SetRequestHeader("Content-Type", "application/json");
            request.timeout = 10;
            try
            {
                await request.SendWebRequest();
                if (request.responseCode == 200) // OK
                {
                    string responseBody = request.downloadHandler.text;
                    LeaderboardEntryResponse result = System.Text.Json.JsonSerializer.Deserialize<LeaderboardEntryResponse>(responseBody);
                    on200OK?.Invoke(result);
                    return;
                }
                if (request.responseCode == 401) // Unauthorized
                {
                    string responseBody = request.downloadHandler.text;
                    UnauthorizedHttpResult result = System.Text.Json.JsonSerializer.Deserialize<UnauthorizedHttpResult>(responseBody);
                    on401Unauthorized?.Invoke(result);
                    return;
                }
                if (request.responseCode == 404) // Not Found
                {
                    string responseBody = request.downloadHandler.text;
                    StringNotFound result = System.Text.Json.JsonSerializer.Deserialize<StringNotFound>(responseBody);
                    on404NotFound?.Invoke(result);
                    return;
                }
                if (request.result != UnityWebRequest.Result.Success)
                {
                    onError?.Invoke(request.error);
                    return;
                }
            }
            catch (Exception ex)
            {
                onError?.Invoke(ex.Message);
            }
        }
    }

    /// <param name="Authorization">
    /// <para>JWT Authorization header using the Bearer scheme. Example: "Bearer {token}"</para>
    /// </param>
    /// <response code="201">
    /// <para>Created</para>
    /// </response>
    /// <response code="401">
    /// <para>Unauthorized</para>
    /// </response>
    /// <response code="404">
    /// <para>Not Found</para>
    /// </response>
    /// <response code="409">
    /// <para>Conflict</para>
    /// </response>
    public async Task PostSeasonsParticipantsAsync(
        int seasonId, string Authorization, ParticipateRequest requestBody, 
        // Created
        Action<SeasonResponse> on201Created = null, 
        // Unauthorized
        Action<UnauthorizedHttpResult> on401Unauthorized = null, 
        // Not Found
        Action<StringNotFound> on404NotFound = null, 
        // Conflict
        Action<StringConflict> on409Conflict = null, 
        Action<string> onError = null)
    {
        string url = $"{Url}/seasons/{seasonId}/participants";
        using (var request = new UnityWebRequest(url, "POST"))
        {
            request.uri = new Uri(url);
            request.SetRequestHeader("Authorization", Authorization.ToString());
            var bodyString = System.Text.Json.JsonSerializer.Serialize(requestBody);
            var jsonToSend = new UTF8Encoding().GetBytes(bodyString);
            request.uploadHandler = new UploadHandlerRaw(jsonToSend);
            request.uploadHandler.contentType = "application/json";
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("accept", "application/json");
            request.SetRequestHeader("Content-Type", "application/json");
            request.timeout = 10;
            try
            {
                await request.SendWebRequest();
                if (request.responseCode == 201) // Created
                {
                    string responseBody = request.downloadHandler.text;
                    SeasonResponse result = System.Text.Json.JsonSerializer.Deserialize<SeasonResponse>(responseBody);
                    on201Created?.Invoke(result);
                    return;
                }
                if (request.responseCode == 401) // Unauthorized
                {
                    string responseBody = request.downloadHandler.text;
                    UnauthorizedHttpResult result = System.Text.Json.JsonSerializer.Deserialize<UnauthorizedHttpResult>(responseBody);
                    on401Unauthorized?.Invoke(result);
                    return;
                }
                if (request.responseCode == 404) // Not Found
                {
                    string responseBody = request.downloadHandler.text;
                    StringNotFound result = System.Text.Json.JsonSerializer.Deserialize<StringNotFound>(responseBody);
                    on404NotFound?.Invoke(result);
                    return;
                }
                if (request.responseCode == 409) // Conflict
                {
                    string responseBody = request.downloadHandler.text;
                    StringConflict result = System.Text.Json.JsonSerializer.Deserialize<StringConflict>(responseBody);
                    on409Conflict?.Invoke(result);
                    return;
                }
                if (request.result != UnityWebRequest.Result.Success)
                {
                    onError?.Invoke(request.error);
                    return;
                }
            }
            catch (Exception ex)
            {
                onError?.Invoke(ex.Message);
            }
        }
    }

    /// <response code="200">
    /// <para>OK</para>
    /// </response>
    /// <response code="404">
    /// <para>Not Found</para>
    /// </response>
    public async Task GetSeasonsByblockAsync(
        int blockIndex, 
        // OK
        Action<SeasonResponse> on200OK = null, 
        // Not Found
        Action<StringNotFound> on404NotFound = null, 
        Action<string> onError = null)
    {
        string url = $"{Url}/seasons/by-block/{blockIndex}";
        using (var request = new UnityWebRequest(url, "GET"))
        {
            request.uri = new Uri(url);
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("accept", "application/json");
            request.SetRequestHeader("Content-Type", "application/json");
            request.timeout = 10;
            try
            {
                await request.SendWebRequest();
                if (request.responseCode == 200) // OK
                {
                    string responseBody = request.downloadHandler.text;
                    SeasonResponse result = System.Text.Json.JsonSerializer.Deserialize<SeasonResponse>(responseBody);
                    on200OK?.Invoke(result);
                    return;
                }
                if (request.responseCode == 404) // Not Found
                {
                    string responseBody = request.downloadHandler.text;
                    StringNotFound result = System.Text.Json.JsonSerializer.Deserialize<StringNotFound>(responseBody);
                    on404NotFound?.Invoke(result);
                    return;
                }
                if (request.result != UnityWebRequest.Result.Success)
                {
                    onError?.Invoke(request.error);
                    return;
                }
            }
            catch (Exception ex)
            {
                onError?.Invoke(ex.Message);
            }
        }
    }

}
